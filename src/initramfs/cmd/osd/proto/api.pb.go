// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The response message containing the requested processes.
type ProcessesReply struct {
	Processes            []*Process `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProcessesReply) Reset()         { *m = ProcessesReply{} }
func (m *ProcessesReply) String() string { return proto.CompactTextString(m) }
func (*ProcessesReply) ProtoMessage()    {}
func (*ProcessesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_682c95cee7fe52e8, []int{0}
}
func (m *ProcessesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessesReply.Unmarshal(m, b)
}
func (m *ProcessesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessesReply.Marshal(b, m, deterministic)
}
func (dst *ProcessesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessesReply.Merge(dst, src)
}
func (m *ProcessesReply) XXX_Size() int {
	return xxx_messageInfo_ProcessesReply.Size(m)
}
func (m *ProcessesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessesReply proto.InternalMessageInfo

func (m *ProcessesReply) GetProcesses() []*Process {
	if m != nil {
		return m.Processes
	}
	return nil
}

// The response message containing the requested processes.
type Process struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State                string   `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_682c95cee7fe52e8, []int{1}
}
func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (dst *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(dst, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Process) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Process) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Process) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// The request message containing the process to restart.
type RestartRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout              int32    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartRequest) Reset()         { *m = RestartRequest{} }
func (m *RestartRequest) String() string { return proto.CompactTextString(m) }
func (*RestartRequest) ProtoMessage()    {}
func (*RestartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_682c95cee7fe52e8, []int{2}
}
func (m *RestartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartRequest.Unmarshal(m, b)
}
func (m *RestartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartRequest.Marshal(b, m, deterministic)
}
func (dst *RestartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartRequest.Merge(dst, src)
}
func (m *RestartRequest) XXX_Size() int {
	return xxx_messageInfo_RestartRequest.Size(m)
}
func (m *RestartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartRequest proto.InternalMessageInfo

func (m *RestartRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RestartRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// The response message containing the restart status.
type RestartReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartReply) Reset()         { *m = RestartReply{} }
func (m *RestartReply) String() string { return proto.CompactTextString(m) }
func (*RestartReply) ProtoMessage()    {}
func (*RestartReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_682c95cee7fe52e8, []int{3}
}
func (m *RestartReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartReply.Unmarshal(m, b)
}
func (m *RestartReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartReply.Marshal(b, m, deterministic)
}
func (dst *RestartReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartReply.Merge(dst, src)
}
func (m *RestartReply) XXX_Size() int {
	return xxx_messageInfo_RestartReply.Size(m)
}
func (m *RestartReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartReply.DiscardUnknown(m)
}

var xxx_messageInfo_RestartReply proto.InternalMessageInfo

// The request message containing the process name.
type LogsRequest struct {
	Process              string   `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Container            bool     `protobuf:"varint,2,opt,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsRequest) Reset()         { *m = LogsRequest{} }
func (m *LogsRequest) String() string { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()    {}
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_682c95cee7fe52e8, []int{4}
}
func (m *LogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsRequest.Unmarshal(m, b)
}
func (m *LogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsRequest.Marshal(b, m, deterministic)
}
func (dst *LogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsRequest.Merge(dst, src)
}
func (m *LogsRequest) XXX_Size() int {
	return xxx_messageInfo_LogsRequest.Size(m)
}
func (m *LogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogsRequest proto.InternalMessageInfo

func (m *LogsRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *LogsRequest) GetContainer() bool {
	if m != nil {
		return m.Container
	}
	return false
}

// The response message containing the requested logs.
type Data struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_682c95cee7fe52e8, []int{5}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterType((*ProcessesReply)(nil), "proto.ProcessesReply")
	proto.RegisterType((*Process)(nil), "proto.Process")
	proto.RegisterType((*RestartRequest)(nil), "proto.RestartRequest")
	proto.RegisterType((*RestartReply)(nil), "proto.RestartReply")
	proto.RegisterType((*LogsRequest)(nil), "proto.LogsRequest")
	proto.RegisterType((*Data)(nil), "proto.Data")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OSDClient is the client API for OSD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OSDClient interface {
	Kubeconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
	Processes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessesReply, error)
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (OSD_LogsClient, error)
	Dmesg(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
}

type oSDClient struct {
	cc *grpc.ClientConn
}

func NewOSDClient(cc *grpc.ClientConn) OSDClient {
	return &oSDClient{cc}
}

func (c *oSDClient) Kubeconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.OSD/Kubeconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Processes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessesReply, error) {
	out := new(ProcessesReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Processes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error) {
	out := new(RestartReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (OSD_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OSD_serviceDesc.Streams[0], "/proto.OSD/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &oSDLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OSD_LogsClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type oSDLogsClient struct {
	grpc.ClientStream
}

func (x *oSDLogsClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oSDClient) Dmesg(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.OSD/Dmesg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.OSD/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSDServer is the server API for OSD service.
type OSDServer interface {
	Kubeconfig(context.Context, *empty.Empty) (*Data, error)
	Processes(context.Context, *empty.Empty) (*ProcessesReply, error)
	Restart(context.Context, *RestartRequest) (*RestartReply, error)
	Logs(*LogsRequest, OSD_LogsServer) error
	Dmesg(context.Context, *empty.Empty) (*Data, error)
	Version(context.Context, *empty.Empty) (*Data, error)
}

func RegisterOSDServer(s *grpc.Server, srv OSDServer) {
	s.RegisterService(&_OSD_serviceDesc, srv)
}

func _OSD_Kubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Kubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Kubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Kubeconfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Processes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Processes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Processes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Processes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OSDServer).Logs(m, &oSDLogsServer{stream})
}

type OSD_LogsServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type oSDLogsServer struct {
	grpc.ServerStream
}

func (x *oSDLogsServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _OSD_Dmesg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Dmesg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Dmesg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Dmesg(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _OSD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OSD",
	HandlerType: (*OSDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kubeconfig",
			Handler:    _OSD_Kubeconfig_Handler,
		},
		{
			MethodName: "Processes",
			Handler:    _OSD_Processes_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _OSD_Restart_Handler,
		},
		{
			MethodName: "Dmesg",
			Handler:    _OSD_Dmesg_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _OSD_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _OSD_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_682c95cee7fe52e8) }

var fileDescriptor_api_682c95cee7fe52e8 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x41, 0xcf, 0x9a, 0x40,
	0x14, 0x14, 0x04, 0x29, 0x4f, 0xc3, 0xe1, 0xb5, 0x35, 0xc4, 0x7a, 0x30, 0x7b, 0x32, 0x69, 0x83,
	0x46, 0x0f, 0x4d, 0x9a, 0xa6, 0x27, 0x3d, 0xb5, 0x49, 0x9b, 0x6d, 0xd2, 0x4b, 0x4f, 0xa0, 0x4f,
	0x42, 0x22, 0x2c, 0x65, 0x97, 0x03, 0xff, 0xae, 0x3f, 0xed, 0x0b, 0xcb, 0xa2, 0x9f, 0x7e, 0xf9,
	0x12, 0x4f, 0xec, 0x0c, 0x33, 0x6f, 0xf7, 0xcd, 0x80, 0x1f, 0x97, 0x59, 0x54, 0x56, 0x42, 0x09,
	0x74, 0xf5, 0x67, 0xf6, 0x21, 0x15, 0x22, 0x3d, 0xd3, 0x4a, 0xa3, 0xa4, 0x3e, 0xad, 0x28, 0x2f,
	0x55, 0xd3, 0x69, 0xd8, 0x37, 0x08, 0x7e, 0x55, 0xe2, 0x40, 0x52, 0x92, 0xe4, 0x54, 0x9e, 0x1b,
	0xfc, 0x04, 0x7e, 0xd9, 0x33, 0xa1, 0xb5, 0x18, 0x2e, 0xc7, 0x9b, 0xa0, 0x13, 0x47, 0x46, 0xc9,
	0xaf, 0x02, 0xf6, 0x17, 0x3c, 0xc3, 0x62, 0x00, 0x76, 0x76, 0x0c, 0xad, 0x85, 0xb5, 0xf4, 0xb9,
	0x9d, 0x1d, 0x11, 0xc1, 0x29, 0xe2, 0x9c, 0x42, 0x5b, 0x33, 0xfa, 0x8c, 0xef, 0xc0, 0x95, 0x2a,
	0x56, 0x14, 0x0e, 0x35, 0xd9, 0x01, 0x9c, 0xc2, 0xa8, 0x3d, 0xd4, 0x32, 0x74, 0x34, 0x6d, 0x10,
	0xfb, 0x02, 0x01, 0x27, 0xa9, 0xe2, 0x4a, 0x71, 0xfa, 0x57, 0x93, 0x54, 0x2f, 0xee, 0x08, 0xc1,
	0x53, 0x59, 0x4e, 0xa2, 0x56, 0xfa, 0x1a, 0x97, 0xf7, 0x90, 0x05, 0x30, 0xb9, 0x78, 0xcb, 0x73,
	0xc3, 0xf6, 0x30, 0xfe, 0x21, 0x52, 0xd9, 0x0f, 0x0a, 0xc1, 0x33, 0x4b, 0x98, 0x69, 0x3d, 0xc4,
	0x39, 0xf8, 0x07, 0x51, 0xa8, 0x38, 0x2b, 0xa8, 0xd2, 0x43, 0xdf, 0xf0, 0x2b, 0xc1, 0xe6, 0xe0,
	0xec, 0x62, 0x15, 0xb7, 0x8b, 0x24, 0x8d, 0xa2, 0xce, 0x3d, 0xe1, 0x1d, 0xd8, 0xfc, 0xb7, 0x61,
	0xf8, 0xf3, 0xf7, 0x0e, 0xb7, 0x00, 0xdf, 0xeb, 0x84, 0x0e, 0xa2, 0x38, 0x65, 0x29, 0x4e, 0xa3,
	0xae, 0x81, 0xa8, 0x6f, 0x20, 0xda, 0xb7, 0x0d, 0xcc, 0xc6, 0x26, 0xd6, 0x76, 0x20, 0x1b, 0xe0,
	0x57, 0xf0, 0x2f, 0x55, 0xbc, 0xea, 0x79, 0x7f, 0x5b, 0x85, 0x29, 0x8d, 0x0d, 0xf0, 0x33, 0x78,
	0x66, 0x5f, 0xec, 0x35, 0xb7, 0xd9, 0xcd, 0xde, 0xde, 0xd3, 0x9d, 0xf1, 0x23, 0x38, 0x6d, 0x30,
	0x88, 0xe6, 0xf7, 0xb3, 0x94, 0xee, 0x5e, 0xb8, 0xb6, 0x30, 0x02, 0x77, 0x97, 0x93, 0x7c, 0x78,
	0xa7, 0x35, 0x78, 0x7f, 0xa8, 0x92, 0x99, 0x28, 0x1e, 0x74, 0x24, 0x23, 0x8d, 0xb6, 0x4f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x41, 0xa8, 0x42, 0xcb, 0xc8, 0x02, 0x00, 0x00,
}
