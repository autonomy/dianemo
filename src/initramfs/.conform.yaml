metadata:
  repository: dianemo/initramfs
  variables:
    rootfs: /rootfs
    versionPath: github.com/autonomy/dianemo/src/initramfs/pkg/version
script:
  template: |
    #!/bin/sh

    set -e

    docker tag {{ .Repository }}:osd autonomy/osd:{{ .Git.SHA }}
    docker save autonomy/osd:{{ .Git.SHA }} -o ../../build/osd.tar

    docker tag {{ .Repository }}:trustd autonomy/trustd:{{ .Git.SHA }}
    docker save autonomy/trustd:{{ .Git.SHA }} -o ../../build/trustd.tar

    docker tag {{ .Repository }}:proxyd autonomy/proxyd:{{ .Git.SHA }}
    docker save autonomy/proxyd:{{ .Git.SHA }} -o ../../build/proxyd.tar

    {{ if and (.Git.IsClean) (or (.Git.IsTag) (eq .Git.Branch "master")) }}
    docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

    docker tag autonomy/osd:{{ .Git.SHA }} autonomy/osd:latest
    docker push autonomy/osd:{{ .Git.SHA }}
    docker push autonomy/osd:latest

    docker tag autonomy/trustd:{{ .Git.SHA }} autonomy/trustd:latest
    docker push autonomy/trustd:{{ .Git.SHA }}
    docker push autonomy/trustd:latest

    docker tag autonomy/proxyd:{{ .Git.SHA }} autonomy/proxyd:latest
    docker push autonomy/proxyd:{{ .Git.SHA }}
    docker push autonomy/proxyd:latest
    {{ end }}
pipeline:
  stages:
  - generate
  - base
  - osd
  - osctl
  - trustd
  - proxyd
  - initramfs
stages:
  base:
    tasks:
    - src
    - test
  osd:
    tasks:
    - osd
  osctl:
    artifacts:
    - source: /osctl-linux-amd64
      destination: ../../build/osctl-linux-amd64
    - source: /osctl-darwin-amd64
      destination: ../../build/osctl-darwin-amd64
    tasks:
    - osctl
  trustd:
    tasks:
    - trustd
  proxyd:
    tasks:
    - proxyd
  initramfs:
    tasks:
    - init
    - initramfs
    - image
  generate:
    artifacts:
    - source: /src/github.com/autonomy/dianemo/src/initramfs/cmd/osd/proto
      destination: ./cmd/osd
    - source: /src/github.com/autonomy/dianemo/src/initramfs/cmd/trustd/proto
      destination: ./cmd/trustd
    tasks:
    - proto
tasks:
  image:
    template: |
      FROM scratch
      WORKDIR /tmp
      COPY --from=init /initramfs/initramfs.xz initramfs.xz
      CMD false
  init:
    template: |
      FROM {{ .Repository }}:base AS {{ .Docker.CurrentStage }}
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs/cmd/{{ .Docker.CurrentStage }}
      {{ if and .Git.IsClean .Git.IsTag }}
      RUN GOOS=linux GOARCH=amd64 go build \
        -ldflags "-s -w -linkmode external -extldflags \"-L/lib -lblkid -luuid\" -X {{ index .Variables "versionPath" }}.Name=Dianemo -X {{ index .Variables "versionPath" }}.Tag={{ .Git.Tag }} -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }} -X \"{{ index .Variables "versionPath" }}.Built={{ .Built }}\"" \
        -o /initramfs/init
      {{ else }}
      RUN GOOS=linux GOARCH=amd64 go build \
        -ldflags "-s -w -linkmode external -extldflags \"-L/lib -lblkid -luuid\" -X {{ index .Variables "versionPath" }}.Name=Dianemo -X {{ index .Variables "versionPath" }}.Tag=none -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }}" \
        -o /initramfs/init
      {{ end }}
      RUN chmod +x /initramfs/init
      RUN mkdir -p /initramfs/lib \
          && cp /tools/lib/libblkid.* /initramfs/lib \
          && cp /tools/lib/libuuid.* /initramfs/lib
  initramfs:
    template: |
      WORKDIR /initramfs
      RUN cp -R {{ index .Variables "rootfs" }}/* ./
      {{ if .Git.IsClean }}
      RUN find . 2>/dev/null | cpio -H newc -o | xz -v -C crc32 -9 -e -T 0 -z >/tmp/initramfs.xz
      {{ else }}
      RUN find . 2>/dev/null | cpio -H newc -o | xz -v -C crc32 -0 -e -T 0 -z >/tmp/initramfs.xz
      {{ end }}
      RUN cp /tmp/initramfs.xz /initramfs/initramfs.xz
  osctl:
    template: |
      FROM {{ .Repository }}:base AS {{ .Docker.CurrentStage }}
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs/cmd/{{ .Docker.CurrentStage }}
      {{ if and .Git.IsClean .Git.IsTag }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Client -X {{ index .Variables "versionPath" }}.Tag={{ .Git.Tag }} -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }} -X \"{{ index .Variables "versionPath" }}.Built={{ .Built }}\"" \
        -o /{{ .Docker.CurrentStage }}-linux-amd64
      RUN GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Client -X {{ index .Variables "versionPath" }}.Tag={{ .Git.Tag }} -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }} -X \"{{ index .Variables "versionPath" }}.Built={{ .Built }}\"" \
        -o /{{ .Docker.CurrentStage }}-darwin-amd64
      {{ else }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Client -X {{ index .Variables "versionPath" }}.Tag=none -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }}" \
        -o /{{ .Docker.CurrentStage }}-linux-amd64
      RUN GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Client -X {{ index .Variables "versionPath" }}.Tag=none -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }}" \
        -o /{{ .Docker.CurrentStage }}-darwin-amd64
      {{ end }}
      RUN chmod +x /{{ .Docker.CurrentStage }}-linux-amd64
      RUN chmod +x /{{ .Docker.CurrentStage }}-darwin-amd64
      CMD false
  osd:
    template: |
      FROM {{ .Repository }}:base AS {{ .Docker.CurrentStage }}
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs/cmd/{{ .Docker.CurrentStage }}
      {{ if and .Git.IsClean .Git.IsTag }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build  -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Server -X {{ index .Variables "versionPath" }}.Tag={{ .Git.Tag }} -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }} -X \"{{ index .Variables "versionPath" }}.Built={{ .Built }}\"" \
        -o /{{ .Docker.CurrentStage }}
      {{ else }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Server -X {{ index .Variables "versionPath" }}.Tag=none -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }}" \
        -o /{{ .Docker.CurrentStage }}
      {{ end }}
      RUN chmod +x /{{ .Docker.CurrentStage }}
      FROM scratch
      COPY --from={{ .Docker.CurrentStage }} /{{ .Docker.CurrentStage }} /{{ .Docker.CurrentStage }}
      ENTRYPOINT ["/{{ .Docker.CurrentStage }}"]
  proto:
    template: |
      FROM golang:1.11.0 AS {{ .Docker.CurrentStage }}
      RUN apt-get update
      RUN apt-get -y install bsdtar
      RUN go get github.com/golang/protobuf/protoc-gen-go
      RUN curl -L https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip | bsdtar -xf -  -C /tmp \
          && mv /tmp/bin/protoc /bin \
          && mv /tmp/include/* /usr/local/include \
          && chmod +x /bin/protoc
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs/cmd/osd
      COPY ./cmd/osd/proto ./proto
      RUN protoc -I/usr/local/include -I./proto --go_out=plugins=grpc:proto proto/api.proto
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs/cmd/trustd
      COPY ./cmd/trustd/proto ./proto
      RUN protoc -I/usr/local/include -I./proto --go_out=plugins=grpc:proto proto/api.proto
  proxyd:
    template: |
      FROM {{ .Repository }}:base AS {{ .Docker.CurrentStage }}
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs/cmd/{{ .Docker.CurrentStage }}
      {{ if and .Git.IsClean .Git.IsTag }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build  -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Proxyd -X {{ index .Variables "versionPath" }}.Tag={{ .Git.Tag }} -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }} -X \"{{ index .Variables "versionPath" }}.Built={{ .Built }}\"" \
        -o /{{ .Docker.CurrentStage }}
      {{ else }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Proxyd -X {{ index .Variables "versionPath" }}.Tag=none -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }}" \
        -o /{{ .Docker.CurrentStage }}
      {{ end }}
      RUN chmod +x /{{ .Docker.CurrentStage }}
      FROM scratch
      COPY --from={{ .Docker.CurrentStage }} /{{ .Docker.CurrentStage }} /{{ .Docker.CurrentStage }}
      ENTRYPOINT ["/{{ .Docker.CurrentStage }}"]
  src:
    template: |
      FROM dianemo/tools:{{ .Docker.Image.Tag }} AS {{ .Docker.CurrentStage }}
      RUN ln -s /tools/lib64 /lib64
      RUN mkdir -p /etc/ssl/certs
      RUN ln -s /tools/etc/ssl/certs/ca-certificates /etc/ssl/certs/ca-certificates
      RUN curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | bash -s -- -b $GOPATH/bin v1.10.1
      ENV GO111MODULE auto
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs
      RUN cp /tools/lib/libblkid.* /lib \
          && cp /tools/lib/libuuid.* /lib
      COPY ./ ./
      RUN go mod download
      RUN go mod verify
  test:
    template: |
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs
      RUN chmod +x ./hack/test.sh
      RUN ./hack/test.sh --lint ./hack/golangci-lint.yaml
      RUN ./hack/test.sh --unit
  trustd:
    template: |
      FROM {{ .Repository }}:base AS {{ .Docker.CurrentStage }}
      WORKDIR /src/github.com/autonomy/dianemo/src/initramfs/cmd/{{ .Docker.CurrentStage }}
      {{ if and .Git.IsClean .Git.IsTag }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build  -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Trustd -X {{ index .Variables "versionPath" }}.Tag={{ .Git.Tag }} -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }} -X \"{{ index .Variables "versionPath" }}.Built={{ .Built }}\"" \
        -o /{{ .Docker.CurrentStage }}
      {{ else }}
      RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a \
        -ldflags "-s -w -X {{ index .Variables "versionPath" }}.Name=Trustd -X {{ index .Variables "versionPath" }}.Tag=none -X {{ index .Variables "versionPath" }}.SHA={{ .Git.SHA }}" \
        -o /{{ .Docker.CurrentStage }}
      {{ end }}
      RUN chmod +x /{{ .Docker.CurrentStage }}
      FROM scratch
      COPY --from={{ .Docker.CurrentStage }} /{{ .Docker.CurrentStage }} /{{ .Docker.CurrentStage }}
      ENTRYPOINT ["/{{ .Docker.CurrentStage }}"]
