// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// DO NOT EDIT: this file is automatically generated by docgen

package v1alpha1

import (
	"github.com/talos-systems/talos/pkg/machinery/config/encoder"
)

var (
	ConfigDoc                  encoder.Doc
	MachineConfigDoc           encoder.Doc
	ClusterConfigDoc           encoder.Doc
	KubeletConfigDoc           encoder.Doc
	NetworkConfigDoc           encoder.Doc
	InstallConfigDoc           encoder.Doc
	TimeConfigDoc              encoder.Doc
	RegistriesConfigDoc        encoder.Doc
	PodCheckpointerDoc         encoder.Doc
	CoreDNSDoc                 encoder.Doc
	EndpointDoc                encoder.Doc
	ControlPlaneConfigDoc      encoder.Doc
	APIServerConfigDoc         encoder.Doc
	ControllerManagerConfigDoc encoder.Doc
	ProxyConfigDoc             encoder.Doc
	SchedulerConfigDoc         encoder.Doc
	EtcdConfigDoc              encoder.Doc
	ClusterNetworkConfigDoc    encoder.Doc
	CNIConfigDoc               encoder.Doc
	AdminKubeconfigConfigDoc   encoder.Doc
	MachineDiskDoc             encoder.Doc
	DiskPartitionDoc           encoder.Doc
	MachineFileDoc             encoder.Doc
	ExtraHostDoc               encoder.Doc
	DeviceDoc                  encoder.Doc
	DHCPOptionsDoc             encoder.Doc
	BondDoc                    encoder.Doc
	VlanDoc                    encoder.Doc
	RouteDoc                   encoder.Doc
	RegistryMirrorConfigDoc    encoder.Doc
	RegistryConfigDoc          encoder.Doc
	RegistryAuthConfigDoc      encoder.Doc
	RegistryTLSConfigDoc       encoder.Doc
)

func init() {
	ConfigDoc.Type = "Config"
	ConfigDoc.Comments[encoder.HeadComment] = ""
	ConfigDoc.Description = ""
	ConfigDoc.Fields = make([]encoder.Doc, 5)
	ConfigDoc.Fields[0].Name = "version"
	ConfigDoc.Fields[0].Type = "string"
	ConfigDoc.Fields[0].Note = ""
	ConfigDoc.Fields[0].Description = "Indicates the schema used to decode the contents."
	ConfigDoc.Fields[0].Comments[encoder.LineComment] = "Indicates the schema used to decode the contents."
	ConfigDoc.Fields[0].Values = []string{
		"`v1alpha1`",
	}
	ConfigDoc.Fields[1].Name = "debug"
	ConfigDoc.Fields[1].Type = "bool"
	ConfigDoc.Fields[1].Note = ""
	ConfigDoc.Fields[1].Description = "Enable verbose logging."
	ConfigDoc.Fields[1].Comments[encoder.LineComment] = "Enable verbose logging."
	ConfigDoc.Fields[1].Values = []string{
		"true",
		"yes",
		"false",
		"no",
	}
	ConfigDoc.Fields[2].Name = "persist"
	ConfigDoc.Fields[2].Type = "bool"
	ConfigDoc.Fields[2].Note = ""
	ConfigDoc.Fields[2].Description = "Indicates whether to pull the machine config upon every boot."
	ConfigDoc.Fields[2].Comments[encoder.LineComment] = "Indicates whether to pull the machine config upon every boot."
	ConfigDoc.Fields[2].Values = []string{
		"true",
		"yes",
		"false",
		"no",
	}
	ConfigDoc.Fields[3].Name = "machine"
	ConfigDoc.Fields[3].Type = "MachineConfig"
	ConfigDoc.Fields[3].Note = ""
	ConfigDoc.Fields[3].Description = "Provides machine specific configuration options."
	ConfigDoc.Fields[3].Comments[encoder.LineComment] = "Provides machine specific configuration options."
	ConfigDoc.Fields[4].Name = "cluster"
	ConfigDoc.Fields[4].Type = "ClusterConfig"
	ConfigDoc.Fields[4].Note = ""
	ConfigDoc.Fields[4].Description = "Provides cluster specific configuration options."
	ConfigDoc.Fields[4].Comments[encoder.LineComment] = "Provides cluster specific configuration options."

	MachineConfigDoc.Type = "MachineConfig"
	MachineConfigDoc.Comments[encoder.HeadComment] = ""
	MachineConfigDoc.Description = ""
	MachineConfigDoc.Fields = make([]encoder.Doc, 13)
	MachineConfigDoc.Fields[0].Name = "type"
	MachineConfigDoc.Fields[0].Type = "string"
	MachineConfigDoc.Fields[0].Note = ""
	MachineConfigDoc.Fields[0].Description = "Defines the role of the machine within the cluster.\n\n##### Init\n\nInit node type designates the first control plane node to come up.\nYou can think of it like a bootstrap node.\nThis node will perform the initial steps to bootstrap the cluster -- generation of TLS assets, starting of the control plane, etc.\n\n##### Control Plane\n\nControl Plane node type designates the node as a control plane member.\nThis means it will host etcd along with the Kubernetes master components such as API Server, Controller Manager, Scheduler.\n\n##### Worker\n\nWorker node type designates the node as a worker node.\nThis means it will be an available compute node for scheduling workloads."
	MachineConfigDoc.Fields[0].Comments[encoder.LineComment] = "Defines the role of the machine within the cluster."
	MachineConfigDoc.Fields[0].Values = []string{
		"`init`",
		"`controlplane`",
		"`join`",
	}
	MachineConfigDoc.Fields[1].Name = "token"
	MachineConfigDoc.Fields[1].Type = "string"
	MachineConfigDoc.Fields[1].Note = "Warning: It is important to ensure that this token is correct since a machine's certificate has a short TTL by default\n"
	MachineConfigDoc.Fields[1].Description = "The `token` is used by a machine to join the PKI of the cluster.\nUsing this token, a machine will create a certificate signing request (CSR), and request a certificate that will be used as its' identity."
	MachineConfigDoc.Fields[1].Comments[encoder.LineComment] = "The `token` is used by a machine to join the PKI of the cluster."

	MachineConfigDoc.Fields[1].AddExample("example token", "328hom.uqjzh6jnn2eie9oi")
	MachineConfigDoc.Fields[2].Name = "ca"
	MachineConfigDoc.Fields[2].Type = "PEMEncodedCertificateAndKey"
	MachineConfigDoc.Fields[2].Note = ""
	MachineConfigDoc.Fields[2].Description = "The root certificate authority of the PKI.\nIt is composed of a base64 encoded `crt` and `key`."
	MachineConfigDoc.Fields[2].Comments[encoder.LineComment] = "The root certificate authority of the PKI."

	MachineConfigDoc.Fields[2].AddExample("machine CA example", pemEncodedCertificateExample)
	MachineConfigDoc.Fields[3].Name = "certSANs"
	MachineConfigDoc.Fields[3].Type = "[]string"
	MachineConfigDoc.Fields[3].Note = ""
	MachineConfigDoc.Fields[3].Description = "Extra certificate subject alternative names for the machine's certificate.\nBy default, all non-loopback interface IPs are automatically added to the certificate's SANs."
	MachineConfigDoc.Fields[3].Comments[encoder.LineComment] = "Extra certificate subject alternative names for the machine's certificate."

	MachineConfigDoc.Fields[3].AddExample("Uncomment this to enable SANs.", []string{"10.0.0.10", "172.16.0.10", "192.168.0.10"})
	MachineConfigDoc.Fields[4].Name = "kubelet"
	MachineConfigDoc.Fields[4].Type = "KubeletConfig"
	MachineConfigDoc.Fields[4].Note = ""
	MachineConfigDoc.Fields[4].Description = "Used to provide additional options to the kubelet."
	MachineConfigDoc.Fields[4].Comments[encoder.LineComment] = "Used to provide additional options to the kubelet."

	MachineConfigDoc.Fields[4].AddExample("Kubelet definition example.", machineKubeletExample)
	MachineConfigDoc.Fields[5].Name = "network"
	MachineConfigDoc.Fields[5].Type = "NetworkConfig"
	MachineConfigDoc.Fields[5].Note = ""
	MachineConfigDoc.Fields[5].Description = "Used to configure the machine's network."
	MachineConfigDoc.Fields[5].Comments[encoder.LineComment] = "Used to configure the machine's network."

	MachineConfigDoc.Fields[5].AddExample("Network definition example.", machineNetworkConfigExample)
	MachineConfigDoc.Fields[6].Name = "disks"
	MachineConfigDoc.Fields[6].Type = "[]MachineDisk"
	MachineConfigDoc.Fields[6].Note = "Note: `size` is in units of bytes.\n"
	MachineConfigDoc.Fields[6].Description = "Used to partition, format and mount additional disks.\nSince the rootfs is read only with the exception of `/var`, mounts are only valid if they are under `/var`.\nNote that the partitioning and formating is done only once, if and only if no existing  partitions are found.\nIf `size:` is omitted, the partition is sized to occupy full disk."
	MachineConfigDoc.Fields[6].Comments[encoder.LineComment] = "Used to partition, format and mount additional disks."

	MachineConfigDoc.Fields[6].AddExample("MachineDisks list example.", machineDisksExample)
	MachineConfigDoc.Fields[7].Name = "install"
	MachineConfigDoc.Fields[7].Type = "InstallConfig"
	MachineConfigDoc.Fields[7].Note = ""
	MachineConfigDoc.Fields[7].Description = "Used to provide instructions for bare-metal installations."
	MachineConfigDoc.Fields[7].Comments[encoder.LineComment] = "Used to provide instructions for bare-metal installations."

	MachineConfigDoc.Fields[7].AddExample("MachineInstall config usage example.", machineInstallExample)
	MachineConfigDoc.Fields[8].Name = "files"
	MachineConfigDoc.Fields[8].Type = "[]MachineFile"
	MachineConfigDoc.Fields[8].Note = "Note: The specified `path` is relative to `/var`.\n"
	MachineConfigDoc.Fields[8].Description = "Allows the addition of user specified files.\nThe value of `op` can be `create`, `overwrite`, or `append`.\nIn the case of `create`, `path` must not exist.\nIn the case of `overwrite`, and `append`, `path` must be a valid file.\nIf an `op` value of `append` is used, the existing file will be appended.\nNote that the file contents are not required to be base64 encoded."
	MachineConfigDoc.Fields[8].Comments[encoder.LineComment] = "Allows the addition of user specified files."

	MachineConfigDoc.Fields[8].AddExample("MachineFiles usage example.", machineFilesExample)
	MachineConfigDoc.Fields[9].Name = "env"
	MachineConfigDoc.Fields[9].Type = "Env"
	MachineConfigDoc.Fields[9].Note = ""
	MachineConfigDoc.Fields[9].Description = "The `env` field allows for the addition of environment variables to a machine.\nAll environment variables are set on the machine in addition to every service."
	MachineConfigDoc.Fields[9].Comments[encoder.LineComment] = "The `env` field allows for the addition of environment variables to a machine."

	MachineConfigDoc.Fields[9].AddExample("Environment variables definition examples.", machineEnvExamples[0])

	MachineConfigDoc.Fields[9].AddExample("", machineEnvExamples[1])

	MachineConfigDoc.Fields[9].AddExample("", machineEnvExamples[2])
	MachineConfigDoc.Fields[9].Values = []string{
		"`GRPC_GO_LOG_VERBOSITY_LEVEL`",
		"`GRPC_GO_LOG_SEVERITY_LEVEL`",
		"`http_proxy`",
		"`https_proxy`",
		"`no_proxy`",
	}
	MachineConfigDoc.Fields[10].Name = "time"
	MachineConfigDoc.Fields[10].Type = "TimeConfig"
	MachineConfigDoc.Fields[10].Note = ""
	MachineConfigDoc.Fields[10].Description = "Used to configure the machine's time settings."
	MachineConfigDoc.Fields[10].Comments[encoder.LineComment] = "Used to configure the machine's time settings."

	MachineConfigDoc.Fields[10].AddExample("Example configuration for cloudflare ntp server.", machineTimeExample)
	MachineConfigDoc.Fields[11].Name = "sysctls"
	MachineConfigDoc.Fields[11].Type = "map[string]string"
	MachineConfigDoc.Fields[11].Note = ""
	MachineConfigDoc.Fields[11].Description = "Used to configure the machine's sysctls."
	MachineConfigDoc.Fields[11].Comments[encoder.LineComment] = "Used to configure the machine's sysctls."

	MachineConfigDoc.Fields[11].AddExample("MachineSysctls usage example.", machineSysctlsExample)
	MachineConfigDoc.Fields[12].Name = "registries"
	MachineConfigDoc.Fields[12].Type = "RegistriesConfig"
	MachineConfigDoc.Fields[12].Note = ""
	MachineConfigDoc.Fields[12].Description = "Used to configure the machine's container image registry mirrors.\n\nAutomatically generates matching CRI configuration for registry mirrors.\n\nSection `mirrors` allows to redirect requests for images to non-default registry,\nwhich might be local registry or caching mirror.\n\nSection `config` provides a way to authenticate to the registry with TLS client\nidentity, provide registry CA, or authentication information.\nAuthentication information has same meaning with the corresponding field in `.docker/config.json`.\n\nSee also matching configuration for [CRI containerd plugin](https://github.com/containerd/cri/blob/master/docs/registry.md)."
	MachineConfigDoc.Fields[12].Comments[encoder.LineComment] = "Used to configure the machine's container image registry mirrors."

	MachineConfigDoc.Fields[12].AddExample("", machineConfigRegistriesExample)

	ClusterConfigDoc.Type = "ClusterConfig"
	ClusterConfigDoc.Comments[encoder.HeadComment] = ""
	ClusterConfigDoc.Description = ""
	ClusterConfigDoc.Fields = make([]encoder.Doc, 17)
	ClusterConfigDoc.Fields[0].Name = "controlPlane"
	ClusterConfigDoc.Fields[0].Type = "ControlPlaneConfig"
	ClusterConfigDoc.Fields[0].Note = ""
	ClusterConfigDoc.Fields[0].Description = "Provides control plane specific configuration options."
	ClusterConfigDoc.Fields[0].Comments[encoder.LineComment] = "Provides control plane specific configuration options."

	ClusterConfigDoc.Fields[0].AddExample("Setting controlplain endpoint address to 1.2.3.4 and port to 443 example.", clusterControlPlaneExample)
	ClusterConfigDoc.Fields[1].Name = "clusterName"
	ClusterConfigDoc.Fields[1].Type = "string"
	ClusterConfigDoc.Fields[1].Note = ""
	ClusterConfigDoc.Fields[1].Description = "Configures the cluster's name."
	ClusterConfigDoc.Fields[1].Comments[encoder.LineComment] = "Configures the cluster's name."
	ClusterConfigDoc.Fields[2].Name = "network"
	ClusterConfigDoc.Fields[2].Type = "ClusterNetworkConfig"
	ClusterConfigDoc.Fields[2].Note = ""
	ClusterConfigDoc.Fields[2].Description = "Provides cluster network configuration."
	ClusterConfigDoc.Fields[2].Comments[encoder.LineComment] = "Provides cluster network configuration."

	ClusterConfigDoc.Fields[2].AddExample("Configuring with flannel cni and setting up subnets.", clusterNetworkExample)
	ClusterConfigDoc.Fields[3].Name = "token"
	ClusterConfigDoc.Fields[3].Type = "string"
	ClusterConfigDoc.Fields[3].Note = ""
	ClusterConfigDoc.Fields[3].Description = "The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/)."
	ClusterConfigDoc.Fields[3].Comments[encoder.LineComment] = "The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/)."

	ClusterConfigDoc.Fields[3].AddExample("Bootstrap token example (do not use in production!).", "wlzjyw.bei2zfylhs2by0wd")
	ClusterConfigDoc.Fields[4].Name = "aescbcEncryptionSecret"
	ClusterConfigDoc.Fields[4].Type = "string"
	ClusterConfigDoc.Fields[4].Note = ""
	ClusterConfigDoc.Fields[4].Description = "The key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)."
	ClusterConfigDoc.Fields[4].Comments[encoder.LineComment] = "The key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)."

	ClusterConfigDoc.Fields[4].AddExample("Decryption secret example (do not use in production!).", "z01mye6j16bspJYtTB/5SFX8j7Ph4JXxM2Xuu4vsBPM=")
	ClusterConfigDoc.Fields[5].Name = "ca"
	ClusterConfigDoc.Fields[5].Type = "PEMEncodedCertificateAndKey"
	ClusterConfigDoc.Fields[5].Note = ""
	ClusterConfigDoc.Fields[5].Description = "The base64 encoded root certificate authority used by Kubernetes."
	ClusterConfigDoc.Fields[5].Comments[encoder.LineComment] = "The base64 encoded root certificate authority used by Kubernetes."

	ClusterConfigDoc.Fields[5].AddExample("ClusterCA example.", pemEncodedCertificateExample)
	ClusterConfigDoc.Fields[6].Name = "apiServer"
	ClusterConfigDoc.Fields[6].Type = "APIServerConfig"
	ClusterConfigDoc.Fields[6].Note = ""
	ClusterConfigDoc.Fields[6].Description = "API server specific configuration options."
	ClusterConfigDoc.Fields[6].Comments[encoder.LineComment] = "API server specific configuration options."

	ClusterConfigDoc.Fields[6].AddExample("", clusterAPIServerExample)
	ClusterConfigDoc.Fields[7].Name = "controllerManager"
	ClusterConfigDoc.Fields[7].Type = "ControllerManagerConfig"
	ClusterConfigDoc.Fields[7].Note = ""
	ClusterConfigDoc.Fields[7].Description = "Controller manager server specific configuration options."
	ClusterConfigDoc.Fields[7].Comments[encoder.LineComment] = "Controller manager server specific configuration options."

	ClusterConfigDoc.Fields[7].AddExample("", clusterControllerManagerExample)
	ClusterConfigDoc.Fields[8].Name = "proxy"
	ClusterConfigDoc.Fields[8].Type = "ProxyConfig"
	ClusterConfigDoc.Fields[8].Note = ""
	ClusterConfigDoc.Fields[8].Description = "Kube-proxy server-specific configuration options"
	ClusterConfigDoc.Fields[8].Comments[encoder.LineComment] = "Kube-proxy server-specific configuration options"

	ClusterConfigDoc.Fields[8].AddExample("", clusterProxyExample)
	ClusterConfigDoc.Fields[9].Name = "scheduler"
	ClusterConfigDoc.Fields[9].Type = "SchedulerConfig"
	ClusterConfigDoc.Fields[9].Note = ""
	ClusterConfigDoc.Fields[9].Description = "Scheduler server specific configuration options."
	ClusterConfigDoc.Fields[9].Comments[encoder.LineComment] = "Scheduler server specific configuration options."

	ClusterConfigDoc.Fields[9].AddExample("", clusterSchedulerConfig)
	ClusterConfigDoc.Fields[10].Name = "etcd"
	ClusterConfigDoc.Fields[10].Type = "EtcdConfig"
	ClusterConfigDoc.Fields[10].Note = ""
	ClusterConfigDoc.Fields[10].Description = "Etcd specific configuration options."
	ClusterConfigDoc.Fields[10].Comments[encoder.LineComment] = "Etcd specific configuration options."

	ClusterConfigDoc.Fields[10].AddExample("", clusterEtcdConfig)
	ClusterConfigDoc.Fields[11].Name = "podCheckpointer"
	ClusterConfigDoc.Fields[11].Type = "PodCheckpointer"
	ClusterConfigDoc.Fields[11].Note = ""
	ClusterConfigDoc.Fields[11].Description = "Pod Checkpointer specific configuration options."
	ClusterConfigDoc.Fields[11].Comments[encoder.LineComment] = "Pod Checkpointer specific configuration options."

	ClusterConfigDoc.Fields[11].AddExample("", clusterPodCheckpointerExample)
	ClusterConfigDoc.Fields[12].Name = "coreDNS"
	ClusterConfigDoc.Fields[12].Type = "CoreDNS"
	ClusterConfigDoc.Fields[12].Note = ""
	ClusterConfigDoc.Fields[12].Description = "Core DNS specific configuration options."
	ClusterConfigDoc.Fields[12].Comments[encoder.LineComment] = "Core DNS specific configuration options."

	ClusterConfigDoc.Fields[12].AddExample("", clusterCoreDNSExample)
	ClusterConfigDoc.Fields[13].Name = "extraManifests"
	ClusterConfigDoc.Fields[13].Type = "[]string"
	ClusterConfigDoc.Fields[13].Note = ""
	ClusterConfigDoc.Fields[13].Description = "A list of urls that point to additional manifests.\nThese will get automatically deployed by bootkube."
	ClusterConfigDoc.Fields[13].Comments[encoder.LineComment] = "A list of urls that point to additional manifests."

	ClusterConfigDoc.Fields[13].AddExample("", []string{
		"https://www.mysweethttpserver.com/manifest1.yaml",
		"https://www.mysweethttpserver.com/manifest2.yaml",
	})
	ClusterConfigDoc.Fields[14].Name = "extraManifestHeaders"
	ClusterConfigDoc.Fields[14].Type = "map[string]string"
	ClusterConfigDoc.Fields[14].Note = ""
	ClusterConfigDoc.Fields[14].Description = "A map of key value pairs that will be added while fetching the ExtraManifests."
	ClusterConfigDoc.Fields[14].Comments[encoder.LineComment] = "A map of key value pairs that will be added while fetching the ExtraManifests."

	ClusterConfigDoc.Fields[14].AddExample("", map[string]string{
		"Token":       "1234567",
		"X-ExtraInfo": "info",
	})
	ClusterConfigDoc.Fields[15].Name = "adminKubeconfig"
	ClusterConfigDoc.Fields[15].Type = "AdminKubeconfigConfig"
	ClusterConfigDoc.Fields[15].Note = ""
	ClusterConfigDoc.Fields[15].Description = "Settings for admin kubeconfig generation.\nCertificate lifetime can be configured."
	ClusterConfigDoc.Fields[15].Comments[encoder.LineComment] = "Settings for admin kubeconfig generation."

	ClusterConfigDoc.Fields[15].AddExample("", clusterAdminKubeconfigExample)
	ClusterConfigDoc.Fields[16].Name = "allowSchedulingOnMasters"
	ClusterConfigDoc.Fields[16].Type = "bool"
	ClusterConfigDoc.Fields[16].Note = ""
	ClusterConfigDoc.Fields[16].Description = "Indicates if master nodes are schedulable."
	ClusterConfigDoc.Fields[16].Comments[encoder.LineComment] = "Indicates if master nodes are schedulable."
	ClusterConfigDoc.Fields[16].Values = []string{
		"true",
		"yes",
		"false",
		"no",
	}

	KubeletConfigDoc.Type = "KubeletConfig"
	KubeletConfigDoc.Comments[encoder.HeadComment] = ""
	KubeletConfigDoc.Description = ""
	KubeletConfigDoc.Fields = make([]encoder.Doc, 3)
	KubeletConfigDoc.Fields[0].Name = "image"
	KubeletConfigDoc.Fields[0].Type = "string"
	KubeletConfigDoc.Fields[0].Note = ""
	KubeletConfigDoc.Fields[0].Description = "The `image` field is an optional reference to an alternative kubelet image."
	KubeletConfigDoc.Fields[0].Comments[encoder.LineComment] = "The `image` field is an optional reference to an alternative kubelet image."

	KubeletConfigDoc.Fields[0].AddExample("", "docker.io/<org>/kubelet:latest")
	KubeletConfigDoc.Fields[1].Name = "extraArgs"
	KubeletConfigDoc.Fields[1].Type = "map[string]string"
	KubeletConfigDoc.Fields[1].Note = ""
	KubeletConfigDoc.Fields[1].Description = "The `extraArgs` field is used to provide additional flags to the kubelet."
	KubeletConfigDoc.Fields[1].Comments[encoder.LineComment] = "The `extraArgs` field is used to provide additional flags to the kubelet."

	KubeletConfigDoc.Fields[1].AddExample("", map[string]string{
		"key": "value",
	})
	KubeletConfigDoc.Fields[2].Name = "extraMounts"
	KubeletConfigDoc.Fields[2].Type = "[]Mount"
	KubeletConfigDoc.Fields[2].Note = ""
	KubeletConfigDoc.Fields[2].Description = "The `extraMounts` field is used to add additional mounts to the kubelet container."
	KubeletConfigDoc.Fields[2].Comments[encoder.LineComment] = "The `extraMounts` field is used to add additional mounts to the kubelet container."

	KubeletConfigDoc.Fields[2].AddExample("", kubeletExtraMountsExample)

	NetworkConfigDoc.Type = "NetworkConfig"
	NetworkConfigDoc.Comments[encoder.HeadComment] = ""
	NetworkConfigDoc.Description = ""
	NetworkConfigDoc.Fields = make([]encoder.Doc, 4)
	NetworkConfigDoc.Fields[0].Name = "hostname"
	NetworkConfigDoc.Fields[0].Type = "string"
	NetworkConfigDoc.Fields[0].Note = ""
	NetworkConfigDoc.Fields[0].Description = "Used to statically set the hostname for the host."
	NetworkConfigDoc.Fields[0].Comments[encoder.LineComment] = "Used to statically set the hostname for the host."
	NetworkConfigDoc.Fields[1].Name = "interfaces"
	NetworkConfigDoc.Fields[1].Type = "[]Device"
	NetworkConfigDoc.Fields[1].Note = ""
	NetworkConfigDoc.Fields[1].Description = "`interfaces` is used to define the network interface configuration.\nBy default all network interfaces will attempt a DHCP discovery.\nThis can be further tuned through this configuration parameter.\n\n##### machine.network.interfaces.interface\n\nThis is the interface name that should be configured.\n\n##### machine.network.interfaces.cidr\n\n`cidr` is used to specify a static IP address to the interface.\nThis should be in proper CIDR notation ( `192.168.2.5/24` ).\n\n> Note: This option is mutually exclusive with DHCP.\n\n##### machine.network.interfaces.dhcp\n\n`dhcp` is used to specify that this device should be configured via DHCP.\n\nThe following DHCP options are supported:\n\n- `OptionClasslessStaticRoute`\n- `OptionDomainNameServer`\n- `OptionDNSDomainSearchList`\n- `OptionHostName`\n\n> Note: This option is mutually exclusive with CIDR.\n>\n> Note: To configure an interface with *only* IPv6 SLAAC addressing, CIDR should be set to \"\" and DHCP to false\n> in order for Talos to skip configuration of addresses.\n> All other options will still apply.\n\n##### machine.network.interfaces.ignore\n\n`ignore` is used to exclude a specific interface from configuration.\nThis parameter is optional.\n\n##### machine.network.interfaces.dummy\n\n`dummy` is used to specify that this interface should be a virtual-only, dummy interface.\nThis parameter is optional.\n\n##### machine.network.interfaces.routes\n\n`routes` is used to specify static routes that may be necessary.\nThis parameter is optional.\n\nRoutes can be repeated and includes a `Network` and `Gateway` field."
	NetworkConfigDoc.Fields[1].Comments[encoder.LineComment] = "`interfaces` is used to define the network interface configuration."
	NetworkConfigDoc.Fields[2].Name = "nameservers"
	NetworkConfigDoc.Fields[2].Type = "[]string"
	NetworkConfigDoc.Fields[2].Note = ""
	NetworkConfigDoc.Fields[2].Description = "Used to statically set the nameservers for the host.\nDefaults to `1.1.1.1` and `8.8.8.8`"
	NetworkConfigDoc.Fields[2].Comments[encoder.LineComment] = "Used to statically set the nameservers for the host."
	NetworkConfigDoc.Fields[3].Name = "extraHostEntries"
	NetworkConfigDoc.Fields[3].Type = "[]ExtraHost"
	NetworkConfigDoc.Fields[3].Note = ""
	NetworkConfigDoc.Fields[3].Description = "Allows for extra entries to be added to /etc/hosts file"
	NetworkConfigDoc.Fields[3].Comments[encoder.LineComment] = "Allows for extra entries to be added to /etc/hosts file"

	NetworkConfigDoc.Fields[3].AddExample("", networkConfigExtraHostsExample)

	InstallConfigDoc.Type = "InstallConfig"
	InstallConfigDoc.Comments[encoder.HeadComment] = ""
	InstallConfigDoc.Description = ""
	InstallConfigDoc.Fields = make([]encoder.Doc, 5)
	InstallConfigDoc.Fields[0].Name = "disk"
	InstallConfigDoc.Fields[0].Type = "string"
	InstallConfigDoc.Fields[0].Note = ""
	InstallConfigDoc.Fields[0].Description = "The disk used to install the bootloader, and ephemeral partitions."
	InstallConfigDoc.Fields[0].Comments[encoder.LineComment] = "The disk used to install the bootloader, and ephemeral partitions."

	InstallConfigDoc.Fields[0].AddExample("", "/dev/sda")

	InstallConfigDoc.Fields[0].AddExample("", "/dev/nvme0")
	InstallConfigDoc.Fields[1].Name = "extraKernelArgs"
	InstallConfigDoc.Fields[1].Type = "[]string"
	InstallConfigDoc.Fields[1].Note = ""
	InstallConfigDoc.Fields[1].Description = "Allows for supplying extra kernel args to the bootloader config."
	InstallConfigDoc.Fields[1].Comments[encoder.LineComment] = "Allows for supplying extra kernel args to the bootloader config."

	InstallConfigDoc.Fields[1].AddExample("", []string{"a=b"})
	InstallConfigDoc.Fields[2].Name = "image"
	InstallConfigDoc.Fields[2].Type = "string"
	InstallConfigDoc.Fields[2].Note = ""
	InstallConfigDoc.Fields[2].Description = "Allows for supplying the image used to perform the installation."
	InstallConfigDoc.Fields[2].Comments[encoder.LineComment] = "Allows for supplying the image used to perform the installation."

	InstallConfigDoc.Fields[2].AddExample("", "docker.io/<org>/installer:latest")
	InstallConfigDoc.Fields[3].Name = "bootloader"
	InstallConfigDoc.Fields[3].Type = "bool"
	InstallConfigDoc.Fields[3].Note = ""
	InstallConfigDoc.Fields[3].Description = "Indicates if a bootloader should be installed."
	InstallConfigDoc.Fields[3].Comments[encoder.LineComment] = "Indicates if a bootloader should be installed."
	InstallConfigDoc.Fields[3].Values = []string{
		"true",
		"yes",
		"false",
		"no",
	}
	InstallConfigDoc.Fields[4].Name = "wipe"
	InstallConfigDoc.Fields[4].Type = "bool"
	InstallConfigDoc.Fields[4].Note = ""
	InstallConfigDoc.Fields[4].Description = "Indicates if zeroes should be written to the `disk` before performing and installation.\nDefaults to `true`."
	InstallConfigDoc.Fields[4].Comments[encoder.LineComment] = "Indicates if zeroes should be written to the `disk` before performing and installation."
	InstallConfigDoc.Fields[4].Values = []string{
		"true",
		"yes",
		"false",
		"no",
	}

	TimeConfigDoc.Type = "TimeConfig"
	TimeConfigDoc.Comments[encoder.HeadComment] = ""
	TimeConfigDoc.Description = ""
	TimeConfigDoc.Fields = make([]encoder.Doc, 2)
	TimeConfigDoc.Fields[0].Name = "disabled"
	TimeConfigDoc.Fields[0].Type = "bool"
	TimeConfigDoc.Fields[0].Note = ""
	TimeConfigDoc.Fields[0].Description = "Indicates if time (ntp) is disabled for the machine\nDefaults to `false`."
	TimeConfigDoc.Fields[0].Comments[encoder.LineComment] = "Indicates if time (ntp) is disabled for the machine"
	TimeConfigDoc.Fields[1].Name = "servers"
	TimeConfigDoc.Fields[1].Type = "[]string"
	TimeConfigDoc.Fields[1].Note = ""
	TimeConfigDoc.Fields[1].Description = "Specifies time (ntp) servers to use for setting system time.\nDefaults to `pool.ntp.org`\n\n> Note: This parameter only supports a single time server"
	TimeConfigDoc.Fields[1].Comments[encoder.LineComment] = "Specifies time (ntp) servers to use for setting system time."

	RegistriesConfigDoc.Type = "RegistriesConfig"
	RegistriesConfigDoc.Comments[encoder.HeadComment] = ""
	RegistriesConfigDoc.Description = ""
	RegistriesConfigDoc.Fields = make([]encoder.Doc, 2)
	RegistriesConfigDoc.Fields[0].Name = "mirrors"
	RegistriesConfigDoc.Fields[0].Type = "map[string]RegistryMirrorConfig"
	RegistriesConfigDoc.Fields[0].Note = ""
	RegistriesConfigDoc.Fields[0].Description = "Specifies mirror configuration for each registry.\nThis setting allows to use local pull-through caching registires,\nair-gapped installations, etc.\n\nRegistry name is the first segment of image identifier, with 'docker.io'\nbeing default one.\nName '*' catches any registry names not specified explicitly."
	RegistriesConfigDoc.Fields[0].Comments[encoder.LineComment] = "Specifies mirror configuration for each registry."
	RegistriesConfigDoc.Fields[1].Name = "config"
	RegistriesConfigDoc.Fields[1].Type = "map[string]RegistryConfig"
	RegistriesConfigDoc.Fields[1].Note = ""
	RegistriesConfigDoc.Fields[1].Description = "Specifies TLS & auth configuration for HTTPS image registries.\nMutual TLS can be enabled with 'clientIdentity' option.\n\nTLS configuration can be skipped if registry has trusted\nserver certificate."
	RegistriesConfigDoc.Fields[1].Comments[encoder.LineComment] = "Specifies TLS & auth configuration for HTTPS image registries."

	PodCheckpointerDoc.Type = "PodCheckpointer"
	PodCheckpointerDoc.Comments[encoder.HeadComment] = ""
	PodCheckpointerDoc.Description = ""
	PodCheckpointerDoc.Fields = make([]encoder.Doc, 1)
	PodCheckpointerDoc.Fields[0].Name = "image"
	PodCheckpointerDoc.Fields[0].Type = "string"
	PodCheckpointerDoc.Fields[0].Note = ""
	PodCheckpointerDoc.Fields[0].Description = "The `image` field is an override to the default pod-checkpointer image."
	PodCheckpointerDoc.Fields[0].Comments[encoder.LineComment] = "The `image` field is an override to the default pod-checkpointer image."

	CoreDNSDoc.Type = "CoreDNS"
	CoreDNSDoc.Comments[encoder.HeadComment] = ""
	CoreDNSDoc.Description = ""
	CoreDNSDoc.Fields = make([]encoder.Doc, 1)
	CoreDNSDoc.Fields[0].Name = "image"
	CoreDNSDoc.Fields[0].Type = "string"
	CoreDNSDoc.Fields[0].Note = ""
	CoreDNSDoc.Fields[0].Description = "The `image` field is an override to the default coredns image."
	CoreDNSDoc.Fields[0].Comments[encoder.LineComment] = "The `image` field is an override to the default coredns image."

	EndpointDoc.Type = "Endpoint"
	EndpointDoc.Comments[encoder.HeadComment] = ""
	EndpointDoc.Description = ""
	EndpointDoc.Fields = make([]encoder.Doc, 0)

	ControlPlaneConfigDoc.Type = "ControlPlaneConfig"
	ControlPlaneConfigDoc.Comments[encoder.HeadComment] = ""
	ControlPlaneConfigDoc.Description = ""
	ControlPlaneConfigDoc.Fields = make([]encoder.Doc, 2)
	ControlPlaneConfigDoc.Fields[0].Name = "endpoint"
	ControlPlaneConfigDoc.Fields[0].Type = "Endpoint"
	ControlPlaneConfigDoc.Fields[0].Note = ""
	ControlPlaneConfigDoc.Fields[0].Description = "Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname.\nIt is single-valued, and may optionally include a port number."
	ControlPlaneConfigDoc.Fields[0].Comments[encoder.LineComment] = "Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname."

	ControlPlaneConfigDoc.Fields[0].AddExample("", "https://1.2.3.4:443")
	ControlPlaneConfigDoc.Fields[1].Name = "localAPIServerPort"
	ControlPlaneConfigDoc.Fields[1].Type = "int"
	ControlPlaneConfigDoc.Fields[1].Note = ""
	ControlPlaneConfigDoc.Fields[1].Description = "The port that the API server listens on internally.\nThis may be different than the port portion listed in the endpoint field above.\nThe default is 6443."
	ControlPlaneConfigDoc.Fields[1].Comments[encoder.LineComment] = "The port that the API server listens on internally."

	APIServerConfigDoc.Type = "APIServerConfig"
	APIServerConfigDoc.Comments[encoder.HeadComment] = ""
	APIServerConfigDoc.Description = ""
	APIServerConfigDoc.Fields = make([]encoder.Doc, 3)
	APIServerConfigDoc.Fields[0].Name = "image"
	APIServerConfigDoc.Fields[0].Type = "string"
	APIServerConfigDoc.Fields[0].Note = ""
	APIServerConfigDoc.Fields[0].Description = "The container image used in the API server manifest."
	APIServerConfigDoc.Fields[0].Comments[encoder.LineComment] = "The container image used in the API server manifest."
	APIServerConfigDoc.Fields[1].Name = "extraArgs"
	APIServerConfigDoc.Fields[1].Type = "map[string]string"
	APIServerConfigDoc.Fields[1].Note = ""
	APIServerConfigDoc.Fields[1].Description = "Extra arguments to supply to the API server."
	APIServerConfigDoc.Fields[1].Comments[encoder.LineComment] = "Extra arguments to supply to the API server."
	APIServerConfigDoc.Fields[2].Name = "certSANs"
	APIServerConfigDoc.Fields[2].Type = "[]string"
	APIServerConfigDoc.Fields[2].Note = ""
	APIServerConfigDoc.Fields[2].Description = "Extra certificate subject alternative names for the API server's certificate."
	APIServerConfigDoc.Fields[2].Comments[encoder.LineComment] = "Extra certificate subject alternative names for the API server's certificate."

	ControllerManagerConfigDoc.Type = "ControllerManagerConfig"
	ControllerManagerConfigDoc.Comments[encoder.HeadComment] = ""
	ControllerManagerConfigDoc.Description = ""
	ControllerManagerConfigDoc.Fields = make([]encoder.Doc, 2)
	ControllerManagerConfigDoc.Fields[0].Name = "image"
	ControllerManagerConfigDoc.Fields[0].Type = "string"
	ControllerManagerConfigDoc.Fields[0].Note = ""
	ControllerManagerConfigDoc.Fields[0].Description = "The container image used in the controller manager manifest."
	ControllerManagerConfigDoc.Fields[0].Comments[encoder.LineComment] = "The container image used in the controller manager manifest."
	ControllerManagerConfigDoc.Fields[1].Name = "extraArgs"
	ControllerManagerConfigDoc.Fields[1].Type = "map[string]string"
	ControllerManagerConfigDoc.Fields[1].Note = ""
	ControllerManagerConfigDoc.Fields[1].Description = "Extra arguments to supply to the controller manager."
	ControllerManagerConfigDoc.Fields[1].Comments[encoder.LineComment] = "Extra arguments to supply to the controller manager."

	ProxyConfigDoc.Type = "ProxyConfig"
	ProxyConfigDoc.Comments[encoder.HeadComment] = ""
	ProxyConfigDoc.Description = ""
	ProxyConfigDoc.Fields = make([]encoder.Doc, 3)
	ProxyConfigDoc.Fields[0].Name = "image"
	ProxyConfigDoc.Fields[0].Type = "string"
	ProxyConfigDoc.Fields[0].Note = ""
	ProxyConfigDoc.Fields[0].Description = "The container image used in the kube-proxy manifest."
	ProxyConfigDoc.Fields[0].Comments[encoder.LineComment] = "The container image used in the kube-proxy manifest."
	ProxyConfigDoc.Fields[1].Name = "mode"
	ProxyConfigDoc.Fields[1].Type = "string"
	ProxyConfigDoc.Fields[1].Note = ""
	ProxyConfigDoc.Fields[1].Description = "proxy mode of kube-proxy.\nBy default, this is 'iptables'."
	ProxyConfigDoc.Fields[1].Comments[encoder.LineComment] = "proxy mode of kube-proxy."
	ProxyConfigDoc.Fields[2].Name = "extraArgs"
	ProxyConfigDoc.Fields[2].Type = "map[string]string"
	ProxyConfigDoc.Fields[2].Note = ""
	ProxyConfigDoc.Fields[2].Description = "Extra arguments to supply to kube-proxy."
	ProxyConfigDoc.Fields[2].Comments[encoder.LineComment] = "Extra arguments to supply to kube-proxy."

	SchedulerConfigDoc.Type = "SchedulerConfig"
	SchedulerConfigDoc.Comments[encoder.HeadComment] = ""
	SchedulerConfigDoc.Description = ""
	SchedulerConfigDoc.Fields = make([]encoder.Doc, 2)
	SchedulerConfigDoc.Fields[0].Name = "image"
	SchedulerConfigDoc.Fields[0].Type = "string"
	SchedulerConfigDoc.Fields[0].Note = ""
	SchedulerConfigDoc.Fields[0].Description = "The container image used in the scheduler manifest."
	SchedulerConfigDoc.Fields[0].Comments[encoder.LineComment] = "The container image used in the scheduler manifest."
	SchedulerConfigDoc.Fields[1].Name = "extraArgs"
	SchedulerConfigDoc.Fields[1].Type = "map[string]string"
	SchedulerConfigDoc.Fields[1].Note = ""
	SchedulerConfigDoc.Fields[1].Description = "Extra arguments to supply to the scheduler."
	SchedulerConfigDoc.Fields[1].Comments[encoder.LineComment] = "Extra arguments to supply to the scheduler."

	EtcdConfigDoc.Type = "EtcdConfig"
	EtcdConfigDoc.Comments[encoder.HeadComment] = ""
	EtcdConfigDoc.Description = ""
	EtcdConfigDoc.Fields = make([]encoder.Doc, 3)
	EtcdConfigDoc.Fields[0].Name = "image"
	EtcdConfigDoc.Fields[0].Type = "string"
	EtcdConfigDoc.Fields[0].Note = ""
	EtcdConfigDoc.Fields[0].Description = "The container image used to create the etcd service."
	EtcdConfigDoc.Fields[0].Comments[encoder.LineComment] = "The container image used to create the etcd service."
	EtcdConfigDoc.Fields[1].Name = "ca"
	EtcdConfigDoc.Fields[1].Type = "PEMEncodedCertificateAndKey"
	EtcdConfigDoc.Fields[1].Note = ""
	EtcdConfigDoc.Fields[1].Description = "The `ca` is the root certificate authority of the PKI.\nIt is composed of a base64 encoded `crt` and `key`."
	EtcdConfigDoc.Fields[1].Comments[encoder.LineComment] = "The `ca` is the root certificate authority of the PKI."

	EtcdConfigDoc.Fields[1].AddExample("", pemEncodedCertificateExample)
	EtcdConfigDoc.Fields[2].Name = "extraArgs"
	EtcdConfigDoc.Fields[2].Type = "map[string]string"
	EtcdConfigDoc.Fields[2].Note = ""
	EtcdConfigDoc.Fields[2].Description = "Extra arguments to supply to etcd.\nNote that the following args are not allowed:\n\n- `name`\n- `data-dir`\n- `initial-cluster-state`\n- `listen-peer-urls`\n- `listen-client-urls`\n- `cert-file`\n- `key-file`\n- `trusted-ca-file`\n- `peer-client-cert-auth`\n- `peer-cert-file`\n- `peer-trusted-ca-file`\n- `peer-key-file`"
	EtcdConfigDoc.Fields[2].Comments[encoder.LineComment] = "Extra arguments to supply to etcd."

	ClusterNetworkConfigDoc.Type = "ClusterNetworkConfig"
	ClusterNetworkConfigDoc.Comments[encoder.HeadComment] = ""
	ClusterNetworkConfigDoc.Description = ""
	ClusterNetworkConfigDoc.Fields = make([]encoder.Doc, 4)
	ClusterNetworkConfigDoc.Fields[0].Name = "cni"
	ClusterNetworkConfigDoc.Fields[0].Type = "CNIConfig"
	ClusterNetworkConfigDoc.Fields[0].Note = ""
	ClusterNetworkConfigDoc.Fields[0].Description = "The CNI used.\nComposed of \"name\" and \"url\".\nThe \"name\" key only supports upstream bootkube options of \"flannel\" or \"custom\".\nURLs is only used if name is equal to \"custom\".\nURLs should point to a single yaml file that will get deployed.\nEmpty struct or any other name will default to bootkube's flannel."
	ClusterNetworkConfigDoc.Fields[0].Comments[encoder.LineComment] = "The CNI used."

	ClusterNetworkConfigDoc.Fields[0].AddExample("", clusterCustomCNIExample)
	ClusterNetworkConfigDoc.Fields[1].Name = "dnsDomain"
	ClusterNetworkConfigDoc.Fields[1].Type = "string"
	ClusterNetworkConfigDoc.Fields[1].Note = ""
	ClusterNetworkConfigDoc.Fields[1].Description = "The domain used by Kubernetes DNS.\nThe default is `cluster.local`"
	ClusterNetworkConfigDoc.Fields[1].Comments[encoder.LineComment] = "The domain used by Kubernetes DNS."

	ClusterNetworkConfigDoc.Fields[1].AddExample("", "cluser.local")
	ClusterNetworkConfigDoc.Fields[2].Name = "podSubnets"
	ClusterNetworkConfigDoc.Fields[2].Type = "[]string"
	ClusterNetworkConfigDoc.Fields[2].Note = ""
	ClusterNetworkConfigDoc.Fields[2].Description = "The pod subnet CIDR."
	ClusterNetworkConfigDoc.Fields[2].Comments[encoder.LineComment] = "The pod subnet CIDR."

	ClusterNetworkConfigDoc.Fields[2].AddExample("", []string{"10.244.0.0/16"})
	ClusterNetworkConfigDoc.Fields[3].Name = "serviceSubnets"
	ClusterNetworkConfigDoc.Fields[3].Type = "[]string"
	ClusterNetworkConfigDoc.Fields[3].Note = ""
	ClusterNetworkConfigDoc.Fields[3].Description = "The service subnet CIDR."
	ClusterNetworkConfigDoc.Fields[3].Comments[encoder.LineComment] = "The service subnet CIDR."

	ClusterNetworkConfigDoc.Fields[3].AddExample("", []string{"10.96.0.0/12"})

	CNIConfigDoc.Type = "CNIConfig"
	CNIConfigDoc.Comments[encoder.HeadComment] = ""
	CNIConfigDoc.Description = ""
	CNIConfigDoc.Fields = make([]encoder.Doc, 2)
	CNIConfigDoc.Fields[0].Name = "name"
	CNIConfigDoc.Fields[0].Type = "string"
	CNIConfigDoc.Fields[0].Note = ""
	CNIConfigDoc.Fields[0].Description = "Name of CNI to use."
	CNIConfigDoc.Fields[0].Comments[encoder.LineComment] = "Name of CNI to use."
	CNIConfigDoc.Fields[1].Name = "urls"
	CNIConfigDoc.Fields[1].Type = "[]string"
	CNIConfigDoc.Fields[1].Note = ""
	CNIConfigDoc.Fields[1].Description = "URLs containing manifests to apply for CNI."
	CNIConfigDoc.Fields[1].Comments[encoder.LineComment] = "URLs containing manifests to apply for CNI."

	AdminKubeconfigConfigDoc.Type = "AdminKubeconfigConfig"
	AdminKubeconfigConfigDoc.Comments[encoder.HeadComment] = ""
	AdminKubeconfigConfigDoc.Description = ""
	AdminKubeconfigConfigDoc.Fields = make([]encoder.Doc, 1)
	AdminKubeconfigConfigDoc.Fields[0].Name = "certLifetime"
	AdminKubeconfigConfigDoc.Fields[0].Type = "Duration"
	AdminKubeconfigConfigDoc.Fields[0].Note = ""
	AdminKubeconfigConfigDoc.Fields[0].Description = "Admin kubeconfig certificate lifetime (default is 1 year).\nField format accepts any Go time.Duration format ('1h' for one hour, '10m' for ten minutes)."
	AdminKubeconfigConfigDoc.Fields[0].Comments[encoder.LineComment] = "Admin kubeconfig certificate lifetime (default is 1 year)."

	MachineDiskDoc.Type = "MachineDisk"
	MachineDiskDoc.Comments[encoder.HeadComment] = ""
	MachineDiskDoc.Description = ""
	MachineDiskDoc.Fields = make([]encoder.Doc, 2)
	MachineDiskDoc.Fields[0].Name = "device"
	MachineDiskDoc.Fields[0].Type = "string"
	MachineDiskDoc.Fields[0].Note = ""
	MachineDiskDoc.Fields[0].Description = "The name of the disk to use."
	MachineDiskDoc.Fields[0].Comments[encoder.LineComment] = "The name of the disk to use."
	MachineDiskDoc.Fields[1].Name = "partitions"
	MachineDiskDoc.Fields[1].Type = "[]DiskPartition"
	MachineDiskDoc.Fields[1].Note = ""
	MachineDiskDoc.Fields[1].Description = "A list of partitions to create on the disk."
	MachineDiskDoc.Fields[1].Comments[encoder.LineComment] = "A list of partitions to create on the disk."

	DiskPartitionDoc.Type = "DiskPartition"
	DiskPartitionDoc.Comments[encoder.HeadComment] = ""
	DiskPartitionDoc.Description = ""
	DiskPartitionDoc.Fields = make([]encoder.Doc, 2)
	DiskPartitionDoc.Fields[0].Name = "size"
	DiskPartitionDoc.Fields[0].Type = "uint64"
	DiskPartitionDoc.Fields[0].Note = ""
	DiskPartitionDoc.Fields[0].Description = "This size of the partition in bytes."
	DiskPartitionDoc.Fields[0].Comments[encoder.LineComment] = "This size of the partition in bytes."
	DiskPartitionDoc.Fields[1].Name = "mountpoint"
	DiskPartitionDoc.Fields[1].Type = "string"
	DiskPartitionDoc.Fields[1].Note = ""
	DiskPartitionDoc.Fields[1].Description = "Where to mount the partition."
	DiskPartitionDoc.Fields[1].Comments[encoder.LineComment] = "Where to mount the partition."

	MachineFileDoc.Type = "MachineFile"
	MachineFileDoc.Comments[encoder.HeadComment] = ""
	MachineFileDoc.Description = ""
	MachineFileDoc.Fields = make([]encoder.Doc, 4)
	MachineFileDoc.Fields[0].Name = "content"
	MachineFileDoc.Fields[0].Type = "string"
	MachineFileDoc.Fields[0].Note = ""
	MachineFileDoc.Fields[0].Description = "The contents of file."
	MachineFileDoc.Fields[0].Comments[encoder.LineComment] = "The contents of file."
	MachineFileDoc.Fields[1].Name = "permissions"
	MachineFileDoc.Fields[1].Type = "FileMode"
	MachineFileDoc.Fields[1].Note = ""
	MachineFileDoc.Fields[1].Description = "The file's permissions in octal."
	MachineFileDoc.Fields[1].Comments[encoder.LineComment] = "The file's permissions in octal."
	MachineFileDoc.Fields[2].Name = "path"
	MachineFileDoc.Fields[2].Type = "string"
	MachineFileDoc.Fields[2].Note = ""
	MachineFileDoc.Fields[2].Description = "The path of the file."
	MachineFileDoc.Fields[2].Comments[encoder.LineComment] = "The path of the file."
	MachineFileDoc.Fields[3].Name = "op"
	MachineFileDoc.Fields[3].Type = "string"
	MachineFileDoc.Fields[3].Note = ""
	MachineFileDoc.Fields[3].Description = "The operation to use"
	MachineFileDoc.Fields[3].Comments[encoder.LineComment] = "The operation to use"
	MachineFileDoc.Fields[3].Values = []string{
		"create",
		"append",
	}

	ExtraHostDoc.Type = "ExtraHost"
	ExtraHostDoc.Comments[encoder.HeadComment] = ""
	ExtraHostDoc.Description = ""
	ExtraHostDoc.Fields = make([]encoder.Doc, 2)
	ExtraHostDoc.Fields[0].Name = "ip"
	ExtraHostDoc.Fields[0].Type = "string"
	ExtraHostDoc.Fields[0].Note = ""
	ExtraHostDoc.Fields[0].Description = "The IP of the host."
	ExtraHostDoc.Fields[0].Comments[encoder.LineComment] = "The IP of the host."
	ExtraHostDoc.Fields[1].Name = "aliases"
	ExtraHostDoc.Fields[1].Type = "[]string"
	ExtraHostDoc.Fields[1].Note = ""
	ExtraHostDoc.Fields[1].Description = "The host alias."
	ExtraHostDoc.Fields[1].Comments[encoder.LineComment] = "The host alias."

	DeviceDoc.Type = "Device"
	DeviceDoc.Comments[encoder.HeadComment] = ""
	DeviceDoc.Description = ""
	DeviceDoc.Fields = make([]encoder.Doc, 10)
	DeviceDoc.Fields[0].Name = "interface"
	DeviceDoc.Fields[0].Type = "string"
	DeviceDoc.Fields[0].Note = ""
	DeviceDoc.Fields[0].Description = "The interface name."
	DeviceDoc.Fields[0].Comments[encoder.LineComment] = "The interface name."
	DeviceDoc.Fields[1].Name = "cidr"
	DeviceDoc.Fields[1].Type = "string"
	DeviceDoc.Fields[1].Note = ""
	DeviceDoc.Fields[1].Description = "The CIDR to use."
	DeviceDoc.Fields[1].Comments[encoder.LineComment] = "The CIDR to use."
	DeviceDoc.Fields[2].Name = "routes"
	DeviceDoc.Fields[2].Type = "[]Route"
	DeviceDoc.Fields[2].Note = ""
	DeviceDoc.Fields[2].Description = "A list of routes associated with the interface.\nIf used in combination with DHCP, these routes will be appended to routes returned by DHCP server."
	DeviceDoc.Fields[2].Comments[encoder.LineComment] = "A list of routes associated with the interface."
	DeviceDoc.Fields[3].Name = "bond"
	DeviceDoc.Fields[3].Type = "Bond"
	DeviceDoc.Fields[3].Note = ""
	DeviceDoc.Fields[3].Description = "Bond specific options."
	DeviceDoc.Fields[3].Comments[encoder.LineComment] = "Bond specific options."
	DeviceDoc.Fields[4].Name = "vlans"
	DeviceDoc.Fields[4].Type = "[]Vlan"
	DeviceDoc.Fields[4].Note = ""
	DeviceDoc.Fields[4].Description = "VLAN specific options."
	DeviceDoc.Fields[4].Comments[encoder.LineComment] = "VLAN specific options."
	DeviceDoc.Fields[5].Name = "mtu"
	DeviceDoc.Fields[5].Type = "int"
	DeviceDoc.Fields[5].Note = ""
	DeviceDoc.Fields[5].Description = "The interface's MTU.\nIf used in combination with DHCP, this will override any MTU settings returned from DHCP server."
	DeviceDoc.Fields[5].Comments[encoder.LineComment] = "The interface's MTU."
	DeviceDoc.Fields[6].Name = "dhcp"
	DeviceDoc.Fields[6].Type = "bool"
	DeviceDoc.Fields[6].Note = ""
	DeviceDoc.Fields[6].Description = "Indicates if DHCP should be used."
	DeviceDoc.Fields[6].Comments[encoder.LineComment] = "Indicates if DHCP should be used."
	DeviceDoc.Fields[7].Name = "ignore"
	DeviceDoc.Fields[7].Type = "bool"
	DeviceDoc.Fields[7].Note = ""
	DeviceDoc.Fields[7].Description = "Indicates if the interface should be ignored."
	DeviceDoc.Fields[7].Comments[encoder.LineComment] = "Indicates if the interface should be ignored."
	DeviceDoc.Fields[8].Name = "dummy"
	DeviceDoc.Fields[8].Type = "bool"
	DeviceDoc.Fields[8].Note = ""
	DeviceDoc.Fields[8].Description = "Indicates if the interface is a dummy interface."
	DeviceDoc.Fields[8].Comments[encoder.LineComment] = "Indicates if the interface is a dummy interface."
	DeviceDoc.Fields[9].Name = "dhcpOptions"
	DeviceDoc.Fields[9].Type = "DHCPOptions"
	DeviceDoc.Fields[9].Note = ""
	DeviceDoc.Fields[9].Description = "DHCP specific options.\nDHCP *must* be set to true for these to take effect."
	DeviceDoc.Fields[9].Comments[encoder.LineComment] = "DHCP specific options."

	DHCPOptionsDoc.Type = "DHCPOptions"
	DHCPOptionsDoc.Comments[encoder.HeadComment] = ""
	DHCPOptionsDoc.Description = ""
	DHCPOptionsDoc.Fields = make([]encoder.Doc, 1)
	DHCPOptionsDoc.Fields[0].Name = "routeMetric"
	DHCPOptionsDoc.Fields[0].Type = "uint32"
	DHCPOptionsDoc.Fields[0].Note = ""
	DHCPOptionsDoc.Fields[0].Description = "The priority of all routes received via DHCP"
	DHCPOptionsDoc.Fields[0].Comments[encoder.LineComment] = "The priority of all routes received via DHCP"

	BondDoc.Type = "Bond"
	BondDoc.Comments[encoder.HeadComment] = ""
	BondDoc.Description = ""
	BondDoc.Fields = make([]encoder.Doc, 27)
	BondDoc.Fields[0].Name = "interfaces"
	BondDoc.Fields[0].Type = "[]string"
	BondDoc.Fields[0].Note = ""
	BondDoc.Fields[0].Description = "The interfaces that make up the bond."
	BondDoc.Fields[0].Comments[encoder.LineComment] = "The interfaces that make up the bond."
	BondDoc.Fields[1].Name = "arpIPTarget"
	BondDoc.Fields[1].Type = "[]string"
	BondDoc.Fields[1].Note = ""
	BondDoc.Fields[1].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[1].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[2].Name = "mode"
	BondDoc.Fields[2].Type = "string"
	BondDoc.Fields[2].Note = ""
	BondDoc.Fields[2].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[2].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[3].Name = "xmitHashPolicy"
	BondDoc.Fields[3].Type = "string"
	BondDoc.Fields[3].Note = ""
	BondDoc.Fields[3].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[3].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[4].Name = "lacpRate"
	BondDoc.Fields[4].Type = "string"
	BondDoc.Fields[4].Note = ""
	BondDoc.Fields[4].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[4].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[5].Name = "adActorSystem"
	BondDoc.Fields[5].Type = "string"
	BondDoc.Fields[5].Note = ""
	BondDoc.Fields[5].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[5].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[6].Name = "arpValidate"
	BondDoc.Fields[6].Type = "string"
	BondDoc.Fields[6].Note = ""
	BondDoc.Fields[6].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[6].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[7].Name = "arpAllTargets"
	BondDoc.Fields[7].Type = "string"
	BondDoc.Fields[7].Note = ""
	BondDoc.Fields[7].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[7].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[8].Name = "primary"
	BondDoc.Fields[8].Type = "string"
	BondDoc.Fields[8].Note = ""
	BondDoc.Fields[8].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[8].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[9].Name = "primaryReselect"
	BondDoc.Fields[9].Type = "string"
	BondDoc.Fields[9].Note = ""
	BondDoc.Fields[9].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[9].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[10].Name = "failOverMac"
	BondDoc.Fields[10].Type = "string"
	BondDoc.Fields[10].Note = ""
	BondDoc.Fields[10].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[10].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[11].Name = "adSelect"
	BondDoc.Fields[11].Type = "string"
	BondDoc.Fields[11].Note = ""
	BondDoc.Fields[11].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[11].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[12].Name = "miimon"
	BondDoc.Fields[12].Type = "uint32"
	BondDoc.Fields[12].Note = ""
	BondDoc.Fields[12].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[12].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[13].Name = "updelay"
	BondDoc.Fields[13].Type = "uint32"
	BondDoc.Fields[13].Note = ""
	BondDoc.Fields[13].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[13].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[14].Name = "downdelay"
	BondDoc.Fields[14].Type = "uint32"
	BondDoc.Fields[14].Note = ""
	BondDoc.Fields[14].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[14].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[15].Name = "arpInterval"
	BondDoc.Fields[15].Type = "uint32"
	BondDoc.Fields[15].Note = ""
	BondDoc.Fields[15].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[15].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[16].Name = "resendIgmp"
	BondDoc.Fields[16].Type = "uint32"
	BondDoc.Fields[16].Note = ""
	BondDoc.Fields[16].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[16].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[17].Name = "minLinks"
	BondDoc.Fields[17].Type = "uint32"
	BondDoc.Fields[17].Note = ""
	BondDoc.Fields[17].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[17].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[18].Name = "lpInterval"
	BondDoc.Fields[18].Type = "uint32"
	BondDoc.Fields[18].Note = ""
	BondDoc.Fields[18].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[18].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[19].Name = "packetsPerSlave"
	BondDoc.Fields[19].Type = "uint32"
	BondDoc.Fields[19].Note = ""
	BondDoc.Fields[19].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[19].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[20].Name = "numPeerNotif"
	BondDoc.Fields[20].Type = "uint8"
	BondDoc.Fields[20].Note = ""
	BondDoc.Fields[20].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[20].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[21].Name = "tlbDynamicLb"
	BondDoc.Fields[21].Type = "uint8"
	BondDoc.Fields[21].Note = ""
	BondDoc.Fields[21].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[21].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[22].Name = "allSlavesActive"
	BondDoc.Fields[22].Type = "uint8"
	BondDoc.Fields[22].Note = ""
	BondDoc.Fields[22].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[22].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[23].Name = "useCarrier"
	BondDoc.Fields[23].Type = "bool"
	BondDoc.Fields[23].Note = ""
	BondDoc.Fields[23].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[23].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[24].Name = "adActorSysPrio"
	BondDoc.Fields[24].Type = "uint16"
	BondDoc.Fields[24].Note = ""
	BondDoc.Fields[24].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[24].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[25].Name = "adUserPortKey"
	BondDoc.Fields[25].Type = "uint16"
	BondDoc.Fields[25].Note = ""
	BondDoc.Fields[25].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[25].Comments[encoder.LineComment] = "A bond option."
	BondDoc.Fields[26].Name = "peerNotifyDelay"
	BondDoc.Fields[26].Type = "uint32"
	BondDoc.Fields[26].Note = ""
	BondDoc.Fields[26].Description = "A bond option.\nPlease see the official kernel documentation."
	BondDoc.Fields[26].Comments[encoder.LineComment] = "A bond option."

	VlanDoc.Type = "Vlan"
	VlanDoc.Comments[encoder.HeadComment] = ""
	VlanDoc.Description = ""
	VlanDoc.Fields = make([]encoder.Doc, 4)
	VlanDoc.Fields[0].Name = "cidr"
	VlanDoc.Fields[0].Type = "string"
	VlanDoc.Fields[0].Note = ""
	VlanDoc.Fields[0].Description = "The CIDR to use."
	VlanDoc.Fields[0].Comments[encoder.LineComment] = "The CIDR to use."
	VlanDoc.Fields[1].Name = "routes"
	VlanDoc.Fields[1].Type = "[]Route"
	VlanDoc.Fields[1].Note = ""
	VlanDoc.Fields[1].Description = "A list of routes associated with the VLAN."
	VlanDoc.Fields[1].Comments[encoder.LineComment] = "A list of routes associated with the VLAN."
	VlanDoc.Fields[2].Name = "dhcp"
	VlanDoc.Fields[2].Type = "bool"
	VlanDoc.Fields[2].Note = ""
	VlanDoc.Fields[2].Description = "Indicates if DHCP should be used."
	VlanDoc.Fields[2].Comments[encoder.LineComment] = "Indicates if DHCP should be used."
	VlanDoc.Fields[3].Name = "vlanId"
	VlanDoc.Fields[3].Type = "uint16"
	VlanDoc.Fields[3].Note = ""
	VlanDoc.Fields[3].Description = "The VLAN's ID."
	VlanDoc.Fields[3].Comments[encoder.LineComment] = "The VLAN's ID."

	RouteDoc.Type = "Route"
	RouteDoc.Comments[encoder.HeadComment] = ""
	RouteDoc.Description = ""
	RouteDoc.Fields = make([]encoder.Doc, 2)
	RouteDoc.Fields[0].Name = "network"
	RouteDoc.Fields[0].Type = "string"
	RouteDoc.Fields[0].Note = ""
	RouteDoc.Fields[0].Description = "The route's network."
	RouteDoc.Fields[0].Comments[encoder.LineComment] = "The route's network."
	RouteDoc.Fields[1].Name = "gateway"
	RouteDoc.Fields[1].Type = "string"
	RouteDoc.Fields[1].Note = ""
	RouteDoc.Fields[1].Description = "The route's gateway."
	RouteDoc.Fields[1].Comments[encoder.LineComment] = "The route's gateway."

	RegistryMirrorConfigDoc.Type = "RegistryMirrorConfig"
	RegistryMirrorConfigDoc.Comments[encoder.HeadComment] = ""
	RegistryMirrorConfigDoc.Description = ""
	RegistryMirrorConfigDoc.Fields = make([]encoder.Doc, 1)
	RegistryMirrorConfigDoc.Fields[0].Name = "endpoints"
	RegistryMirrorConfigDoc.Fields[0].Type = "[]string"
	RegistryMirrorConfigDoc.Fields[0].Note = ""
	RegistryMirrorConfigDoc.Fields[0].Description = "List of endpoints (URLs) for registry mirrors to use.\nEndpoint configures HTTP/HTTPS access mode, host name,\nport and path (if path is not set, it defaults to `/v2`)."
	RegistryMirrorConfigDoc.Fields[0].Comments[encoder.LineComment] = "List of endpoints (URLs) for registry mirrors to use."

	RegistryConfigDoc.Type = "RegistryConfig"
	RegistryConfigDoc.Comments[encoder.HeadComment] = ""
	RegistryConfigDoc.Description = ""
	RegistryConfigDoc.Fields = make([]encoder.Doc, 2)
	RegistryConfigDoc.Fields[0].Name = "tls"
	RegistryConfigDoc.Fields[0].Type = "RegistryTLSConfig"
	RegistryConfigDoc.Fields[0].Note = ""
	RegistryConfigDoc.Fields[0].Description = "The TLS configuration for this registry."
	RegistryConfigDoc.Fields[0].Comments[encoder.LineComment] = "The TLS configuration for this registry."
	RegistryConfigDoc.Fields[1].Name = "auth"
	RegistryConfigDoc.Fields[1].Type = "RegistryAuthConfig"
	RegistryConfigDoc.Fields[1].Note = ""
	RegistryConfigDoc.Fields[1].Description = "The auth configuration for this registry."
	RegistryConfigDoc.Fields[1].Comments[encoder.LineComment] = "The auth configuration for this registry."

	RegistryAuthConfigDoc.Type = "RegistryAuthConfig"
	RegistryAuthConfigDoc.Comments[encoder.HeadComment] = ""
	RegistryAuthConfigDoc.Description = ""
	RegistryAuthConfigDoc.Fields = make([]encoder.Doc, 4)
	RegistryAuthConfigDoc.Fields[0].Name = "username"
	RegistryAuthConfigDoc.Fields[0].Type = "string"
	RegistryAuthConfigDoc.Fields[0].Note = ""
	RegistryAuthConfigDoc.Fields[0].Description = "Optional registry authentication.\nThe meaning of each field is the same with the corresponding field in .docker/config.json."
	RegistryAuthConfigDoc.Fields[0].Comments[encoder.LineComment] = "Optional registry authentication."
	RegistryAuthConfigDoc.Fields[1].Name = "password"
	RegistryAuthConfigDoc.Fields[1].Type = "string"
	RegistryAuthConfigDoc.Fields[1].Note = ""
	RegistryAuthConfigDoc.Fields[1].Description = "Optional registry authentication.\nThe meaning of each field is the same with the corresponding field in .docker/config.json."
	RegistryAuthConfigDoc.Fields[1].Comments[encoder.LineComment] = "Optional registry authentication."
	RegistryAuthConfigDoc.Fields[2].Name = "auth"
	RegistryAuthConfigDoc.Fields[2].Type = "string"
	RegistryAuthConfigDoc.Fields[2].Note = ""
	RegistryAuthConfigDoc.Fields[2].Description = "Optional registry authentication.\nThe meaning of each field is the same with the corresponding field in .docker/config.json."
	RegistryAuthConfigDoc.Fields[2].Comments[encoder.LineComment] = "Optional registry authentication."
	RegistryAuthConfigDoc.Fields[3].Name = "identityToken"
	RegistryAuthConfigDoc.Fields[3].Type = "string"
	RegistryAuthConfigDoc.Fields[3].Note = ""
	RegistryAuthConfigDoc.Fields[3].Description = "Optional registry authentication.\nThe meaning of each field is the same with the corresponding field in .docker/config.json."
	RegistryAuthConfigDoc.Fields[3].Comments[encoder.LineComment] = "Optional registry authentication."

	RegistryTLSConfigDoc.Type = "RegistryTLSConfig"
	RegistryTLSConfigDoc.Comments[encoder.HeadComment] = ""
	RegistryTLSConfigDoc.Description = ""
	RegistryTLSConfigDoc.Fields = make([]encoder.Doc, 3)
	RegistryTLSConfigDoc.Fields[0].Name = "clientIdentity"
	RegistryTLSConfigDoc.Fields[0].Type = "PEMEncodedCertificateAndKey"
	RegistryTLSConfigDoc.Fields[0].Note = ""
	RegistryTLSConfigDoc.Fields[0].Description = "Enable mutual TLS authentication with the registry.\nClient certificate and key should be base64-encoded."
	RegistryTLSConfigDoc.Fields[0].Comments[encoder.LineComment] = "Enable mutual TLS authentication with the registry."

	RegistryTLSConfigDoc.Fields[0].AddExample("", pemEncodedCertificateExample)
	RegistryTLSConfigDoc.Fields[1].Name = "ca"
	RegistryTLSConfigDoc.Fields[1].Type = "Base64Bytes"
	RegistryTLSConfigDoc.Fields[1].Note = ""
	RegistryTLSConfigDoc.Fields[1].Description = "CA registry certificate to add the list of trusted certificates.\nCertificate should be base64-encoded."
	RegistryTLSConfigDoc.Fields[1].Comments[encoder.LineComment] = "CA registry certificate to add the list of trusted certificates."
	RegistryTLSConfigDoc.Fields[2].Name = "insecureSkipVerify"
	RegistryTLSConfigDoc.Fields[2].Type = "bool"
	RegistryTLSConfigDoc.Fields[2].Note = ""
	RegistryTLSConfigDoc.Fields[2].Description = "Skip TLS server certificate verification (not recommended)."
	RegistryTLSConfigDoc.Fields[2].Comments[encoder.LineComment] = "Skip TLS server certificate verification (not recommended)."
}

func (_ Config) Doc() *encoder.Doc {
	return &ConfigDoc
}

func (_ MachineConfig) Doc() *encoder.Doc {
	return &MachineConfigDoc
}

func (_ ClusterConfig) Doc() *encoder.Doc {
	return &ClusterConfigDoc
}

func (_ KubeletConfig) Doc() *encoder.Doc {
	return &KubeletConfigDoc
}

func (_ NetworkConfig) Doc() *encoder.Doc {
	return &NetworkConfigDoc
}

func (_ InstallConfig) Doc() *encoder.Doc {
	return &InstallConfigDoc
}

func (_ TimeConfig) Doc() *encoder.Doc {
	return &TimeConfigDoc
}

func (_ RegistriesConfig) Doc() *encoder.Doc {
	return &RegistriesConfigDoc
}

func (_ PodCheckpointer) Doc() *encoder.Doc {
	return &PodCheckpointerDoc
}

func (_ CoreDNS) Doc() *encoder.Doc {
	return &CoreDNSDoc
}

func (_ Endpoint) Doc() *encoder.Doc {
	return &EndpointDoc
}

func (_ ControlPlaneConfig) Doc() *encoder.Doc {
	return &ControlPlaneConfigDoc
}

func (_ APIServerConfig) Doc() *encoder.Doc {
	return &APIServerConfigDoc
}

func (_ ControllerManagerConfig) Doc() *encoder.Doc {
	return &ControllerManagerConfigDoc
}

func (_ ProxyConfig) Doc() *encoder.Doc {
	return &ProxyConfigDoc
}

func (_ SchedulerConfig) Doc() *encoder.Doc {
	return &SchedulerConfigDoc
}

func (_ EtcdConfig) Doc() *encoder.Doc {
	return &EtcdConfigDoc
}

func (_ ClusterNetworkConfig) Doc() *encoder.Doc {
	return &ClusterNetworkConfigDoc
}

func (_ CNIConfig) Doc() *encoder.Doc {
	return &CNIConfigDoc
}

func (_ AdminKubeconfigConfig) Doc() *encoder.Doc {
	return &AdminKubeconfigConfigDoc
}

func (_ MachineDisk) Doc() *encoder.Doc {
	return &MachineDiskDoc
}

func (_ DiskPartition) Doc() *encoder.Doc {
	return &DiskPartitionDoc
}

func (_ MachineFile) Doc() *encoder.Doc {
	return &MachineFileDoc
}

func (_ ExtraHost) Doc() *encoder.Doc {
	return &ExtraHostDoc
}

func (_ Device) Doc() *encoder.Doc {
	return &DeviceDoc
}

func (_ DHCPOptions) Doc() *encoder.Doc {
	return &DHCPOptionsDoc
}

func (_ Bond) Doc() *encoder.Doc {
	return &BondDoc
}

func (_ Vlan) Doc() *encoder.Doc {
	return &VlanDoc
}

func (_ Route) Doc() *encoder.Doc {
	return &RouteDoc
}

func (_ RegistryMirrorConfig) Doc() *encoder.Doc {
	return &RegistryMirrorConfigDoc
}

func (_ RegistryConfig) Doc() *encoder.Doc {
	return &RegistryConfigDoc
}

func (_ RegistryAuthConfig) Doc() *encoder.Doc {
	return &RegistryAuthConfigDoc
}

func (_ RegistryTLSConfig) Doc() *encoder.Doc {
	return &RegistryTLSConfigDoc
}

// GetConfigurationDoc returns documentation for the file ./v1alpha1_types_doc.go.
func GetConfigurationDoc() *encoder.FileDoc {
	return &encoder.FileDoc{
		Name:        "Configuration",
		Description: "Package v1alpha1 configuration file contains all the options available for configuring a machine.\n\nTo generate a set of basic configuration files, run:\n```bash\ntalosctl gen config --version v1alpha1 <cluster name> <cluster endpoint>\n````\n\nThis will generate a machine config for each node type, and a talosconfig for the CLI.\n",
		Structs: []*encoder.Doc{
			&ConfigDoc,
			&MachineConfigDoc,
			&ClusterConfigDoc,
			&KubeletConfigDoc,
			&NetworkConfigDoc,
			&InstallConfigDoc,
			&TimeConfigDoc,
			&RegistriesConfigDoc,
			&PodCheckpointerDoc,
			&CoreDNSDoc,
			&EndpointDoc,
			&ControlPlaneConfigDoc,
			&APIServerConfigDoc,
			&ControllerManagerConfigDoc,
			&ProxyConfigDoc,
			&SchedulerConfigDoc,
			&EtcdConfigDoc,
			&ClusterNetworkConfigDoc,
			&CNIConfigDoc,
			&AdminKubeconfigConfigDoc,
			&MachineDiskDoc,
			&DiskPartitionDoc,
			&MachineFileDoc,
			&ExtraHostDoc,
			&DeviceDoc,
			&DHCPOptionsDoc,
			&BondDoc,
			&VlanDoc,
			&RouteDoc,
			&RegistryMirrorConfigDoc,
			&RegistryConfigDoc,
			&RegistryAuthConfigDoc,
			&RegistryTLSConfigDoc,
		},
	}
}
