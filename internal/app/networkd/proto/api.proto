syntax = "proto3";

package proto;

import "google/protobuf/empty.proto";

// The Networkd service definition.
service Networkd {
  rpc Routes(google.protobuf.Empty) returns (RoutesReply);
  rpc Interfaces(google.protobuf.Empty) returns (InterfacesReply);
  rpc InterfaceStats(InterfaceStatsRequest) returns (InterfacesReply);
}

enum AddressFamily {
  option allow_alias = true;
  AF_UNSPEC = 0;
  AF_INET = 2;
  IPV4 = 2;
  AF_INET6 = 10;
  IPV6 = 10;
}

enum RouteProtocol {
  RTPROT_UNSPEC = 0;
  RTPROT_REDIRECT = 1; // Route installed by ICMP redirects
  RTPROT_KERNEL = 2; // Route installed by kernel
  RTPROT_BOOT = 3; // Route installed during boot
  RTPROT_STATIC = 4; // Route installed by administrator
  RTPROT_GATED = 8; // Route installed by gated
  RTPROT_RA = 9; // Route installed by router advertisement
  RTPROT_MRT = 10; // Route installed by Merit MRT
  RTPROT_ZEBRA = 11; // Route installed by Zebra/Quagga
  RTPROT_BIRD = 12; // Route installed by Bird
  RTPROT_DNROUTED = 13; // Route installed by DECnet routing daemon
  RTPROT_XORP = 14; // Route installed by XORP
  RTPROT_NTK = 15; // Route installed by Netsukuku
  RTPROT_DHCP = 16; // Route installed by DHCP
  RTPROT_MROUTED = 17; // Route installed by Multicast daemon
  RTPROT_BABEL = 42; // Route installed by Babel daemon
}

enum InterfaceFlags {
  FlagUnknown = 0;
  FlagUp = 1;
  FlagBroadcast = 2;
  FlagLoopback = 3;
  FlagPointToPoint = 4;
  FlagMulticast = 5;
}

// The response message containing the routes.
message RoutesReply {
  repeated Route routes = 1;
}

// The response message containing a route.
message Route {
  // Interface is the interface over which traffic to this destination should be sent
  string interface = 1;
  // Destination is the network prefix CIDR which this route provides
  string destination = 2;
  // Gateway is the gateway address to which traffic to this destination should be sent
  string gateway = 3;
  // Metric is the priority of the route, where lower metrics have higher priorities
  uint32 metric = 4;
  // Scope desribes the scope of this route
  uint32 scope = 5;
  // Source is the source prefix CIDR for the route, if one is defined
  string source = 6;
  // Family is the address family of the route.  Currently, the only options are AF_INET (IPV4) and AF_INET6 (IPV6).
  AddressFamily family = 7;
  // Protocol is the protocol by which this route came to be in place
  RouteProtocol protocol = 8;
  // Flags indicate any special flags on the route
  uint32 flags = 9;
}

message InterfacesReply {
  repeated Interface interfaces = 1;
}

message InterfaceStatsRequest {
  repeated string interfaces = 1;
}

// Interface represents a net.Interface
message Interface {
  uint32 index = 1;
  uint32 mtu = 2;
  string name = 3;
  string hardwareaddr = 4;
  InterfaceFlags flags = 5;
  repeated string ipaddress = 6;
  LinkStats linkstats = 7;
}

message LinkStats {
  // total packets received
  uint64 RXPackets = 1;
  // total packets transmitted
  uint64 TXPackets = 2;
  // total bytes received
  uint64 RXBytes = 3;
  // total bytes transmitted
  uint64 TXBytes = 4;
  // bad packets receiv3d
  uint64 RXErrors = 5;
  // packet transmit problems
  uint64 TXErrors = 6;
  // no space in linux buffers
  uint64 RXDropped = 7;
  // no space available in linux
  uint64 TXDropped = 8;
  // multicast packets received
  uint64 Multicast = 9;
  uint64 Collisions = 10;
  // detailed rx_errors:
  uint64 RXLengthErrors = 11;
  // receiver ring buff overflow
  uint64 RXOverErrors = 12;
  // recved pkt with crc error
  uint64 RXCRCErrors = 13;
  // recv'd frame alignment error
  uint64 RXFrameErrors = 14;
  // recv'r fifo overrun
  uint64 RXFIFOErrors = 15;
  // receiver missed packet
  uint64 RXMissedErrors = 16;
  // detailed tx_errors
  uint64 TXAbortedErrors = 17;
  uint64 TXCarrierErrors = 18;
  uint64 TXFIFOErrors = 19;
  uint64 TXHeartbeatErrors = 20;
  uint64 TXWindowErrors = 21;
  // for cslip etc
  uint64 RXCompressed = 22;
  uint64 TXCompressed = 23;
  uint64 RXNoHandler = 24;
}
