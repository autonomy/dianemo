// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the containerd namespace.
type ProcessesRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessesRequest) Reset()         { *m = ProcessesRequest{} }
func (m *ProcessesRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessesRequest) ProtoMessage()    {}
func (*ProcessesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *ProcessesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessesRequest.Unmarshal(m, b)
}
func (m *ProcessesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessesRequest.Marshal(b, m, deterministic)
}
func (m *ProcessesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessesRequest.Merge(m, src)
}
func (m *ProcessesRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessesRequest.Size(m)
}
func (m *ProcessesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessesRequest proto.InternalMessageInfo

func (m *ProcessesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// The response message containing the requested processes.
type ProcessesReply struct {
	Processes            []*Process `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProcessesReply) Reset()         { *m = ProcessesReply{} }
func (m *ProcessesReply) String() string { return proto.CompactTextString(m) }
func (*ProcessesReply) ProtoMessage()    {}
func (*ProcessesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *ProcessesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessesReply.Unmarshal(m, b)
}
func (m *ProcessesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessesReply.Marshal(b, m, deterministic)
}
func (m *ProcessesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessesReply.Merge(m, src)
}
func (m *ProcessesReply) XXX_Size() int {
	return xxx_messageInfo_ProcessesReply.Size(m)
}
func (m *ProcessesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessesReply proto.InternalMessageInfo

func (m *ProcessesReply) GetProcesses() []*Process {
	if m != nil {
		return m.Processes
	}
	return nil
}

// The response message containing the requested processes.
type Process struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Image                string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Pid                  uint32   `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Status               string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Process) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Process) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Process) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Process) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// The request message containing the containerd namespace.
type StatsRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsRequest) Reset()         { *m = StatsRequest{} }
func (m *StatsRequest) String() string { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()    {}
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *StatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsRequest.Unmarshal(m, b)
}
func (m *StatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsRequest.Marshal(b, m, deterministic)
}
func (m *StatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsRequest.Merge(m, src)
}
func (m *StatsRequest) XXX_Size() int {
	return xxx_messageInfo_StatsRequest.Size(m)
}
func (m *StatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatsRequest proto.InternalMessageInfo

func (m *StatsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// The response message containing the requested stats.
type StatsReply struct {
	Stats                []*Stat  `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsReply) Reset()         { *m = StatsReply{} }
func (m *StatsReply) String() string { return proto.CompactTextString(m) }
func (*StatsReply) ProtoMessage()    {}
func (*StatsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *StatsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsReply.Unmarshal(m, b)
}
func (m *StatsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsReply.Marshal(b, m, deterministic)
}
func (m *StatsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsReply.Merge(m, src)
}
func (m *StatsReply) XXX_Size() int {
	return xxx_messageInfo_StatsReply.Size(m)
}
func (m *StatsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatsReply proto.InternalMessageInfo

func (m *StatsReply) GetStats() []*Stat {
	if m != nil {
		return m.Stats
	}
	return nil
}

// The response message containing the requested stat.
type Stat struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	MemoryUsage          uint64   `protobuf:"varint,4,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	CpuUsage             uint64   `protobuf:"varint,5,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stat) Reset()         { *m = Stat{} }
func (m *Stat) String() string { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()    {}
func (*Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *Stat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stat.Unmarshal(m, b)
}
func (m *Stat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stat.Marshal(b, m, deterministic)
}
func (m *Stat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stat.Merge(m, src)
}
func (m *Stat) XXX_Size() int {
	return xxx_messageInfo_Stat.Size(m)
}
func (m *Stat) XXX_DiscardUnknown() {
	xxx_messageInfo_Stat.DiscardUnknown(m)
}

var xxx_messageInfo_Stat proto.InternalMessageInfo

func (m *Stat) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Stat) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stat) GetMemoryUsage() uint64 {
	if m != nil {
		return m.MemoryUsage
	}
	return 0
}

func (m *Stat) GetCpuUsage() uint64 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

// The request message containing the process to restart.
type RestartRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Timeout              int32    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartRequest) Reset()         { *m = RestartRequest{} }
func (m *RestartRequest) String() string { return proto.CompactTextString(m) }
func (*RestartRequest) ProtoMessage()    {}
func (*RestartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *RestartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartRequest.Unmarshal(m, b)
}
func (m *RestartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartRequest.Marshal(b, m, deterministic)
}
func (m *RestartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartRequest.Merge(m, src)
}
func (m *RestartRequest) XXX_Size() int {
	return xxx_messageInfo_RestartRequest.Size(m)
}
func (m *RestartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartRequest proto.InternalMessageInfo

func (m *RestartRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RestartRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RestartRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// The response message containing the restart status.
type RestartReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartReply) Reset()         { *m = RestartReply{} }
func (m *RestartReply) String() string { return proto.CompactTextString(m) }
func (*RestartReply) ProtoMessage()    {}
func (*RestartReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *RestartReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartReply.Unmarshal(m, b)
}
func (m *RestartReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartReply.Marshal(b, m, deterministic)
}
func (m *RestartReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartReply.Merge(m, src)
}
func (m *RestartReply) XXX_Size() int {
	return xxx_messageInfo_RestartReply.Size(m)
}
func (m *RestartReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartReply.DiscardUnknown(m)
}

var xxx_messageInfo_RestartReply proto.InternalMessageInfo

// The response message containing the restart status.
type ResetReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetReply) Reset()         { *m = ResetReply{} }
func (m *ResetReply) String() string { return proto.CompactTextString(m) }
func (*ResetReply) ProtoMessage()    {}
func (*ResetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *ResetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetReply.Unmarshal(m, b)
}
func (m *ResetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetReply.Marshal(b, m, deterministic)
}
func (m *ResetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetReply.Merge(m, src)
}
func (m *ResetReply) XXX_Size() int {
	return xxx_messageInfo_ResetReply.Size(m)
}
func (m *ResetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResetReply proto.InternalMessageInfo

// The request message containing the process name.
type LogsRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsRequest) Reset()         { *m = LogsRequest{} }
func (m *LogsRequest) String() string { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()    {}
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *LogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsRequest.Unmarshal(m, b)
}
func (m *LogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsRequest.Marshal(b, m, deterministic)
}
func (m *LogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsRequest.Merge(m, src)
}
func (m *LogsRequest) XXX_Size() int {
	return xxx_messageInfo_LogsRequest.Size(m)
}
func (m *LogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogsRequest proto.InternalMessageInfo

func (m *LogsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// The response message containing the requested logs.
type Data struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// The response message containing the routes.
type RoutesReply struct {
	Routes               []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutesReply) Reset()         { *m = RoutesReply{} }
func (m *RoutesReply) String() string { return proto.CompactTextString(m) }
func (*RoutesReply) ProtoMessage()    {}
func (*RoutesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *RoutesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutesReply.Unmarshal(m, b)
}
func (m *RoutesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutesReply.Marshal(b, m, deterministic)
}
func (m *RoutesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutesReply.Merge(m, src)
}
func (m *RoutesReply) XXX_Size() int {
	return xxx_messageInfo_RoutesReply.Size(m)
}
func (m *RoutesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutesReply.DiscardUnknown(m)
}

var xxx_messageInfo_RoutesReply proto.InternalMessageInfo

func (m *RoutesReply) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// The response message containing a route.
type Route struct {
	Interface            string   `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Destination          string   `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Gateway              string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *Route) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Route) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type TopRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopRequest) Reset()         { *m = TopRequest{} }
func (m *TopRequest) String() string { return proto.CompactTextString(m) }
func (*TopRequest) ProtoMessage()    {}
func (*TopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *TopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopRequest.Unmarshal(m, b)
}
func (m *TopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopRequest.Marshal(b, m, deterministic)
}
func (m *TopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopRequest.Merge(m, src)
}
func (m *TopRequest) XXX_Size() int {
	return xxx_messageInfo_TopRequest.Size(m)
}
func (m *TopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopRequest proto.InternalMessageInfo

type TopReply struct {
	ProcessList          *ProcessList `protobuf:"bytes,1,opt,name=process_list,json=processList,proto3" json:"process_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TopReply) Reset()         { *m = TopReply{} }
func (m *TopReply) String() string { return proto.CompactTextString(m) }
func (*TopReply) ProtoMessage()    {}
func (*TopReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *TopReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopReply.Unmarshal(m, b)
}
func (m *TopReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopReply.Marshal(b, m, deterministic)
}
func (m *TopReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopReply.Merge(m, src)
}
func (m *TopReply) XXX_Size() int {
	return xxx_messageInfo_TopReply.Size(m)
}
func (m *TopReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TopReply.DiscardUnknown(m)
}

var xxx_messageInfo_TopReply proto.InternalMessageInfo

func (m *TopReply) GetProcessList() *ProcessList {
	if m != nil {
		return m.ProcessList
	}
	return nil
}

type ProcessList struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessList) Reset()         { *m = ProcessList{} }
func (m *ProcessList) String() string { return proto.CompactTextString(m) }
func (*ProcessList) ProtoMessage()    {}
func (*ProcessList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *ProcessList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessList.Unmarshal(m, b)
}
func (m *ProcessList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessList.Marshal(b, m, deterministic)
}
func (m *ProcessList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessList.Merge(m, src)
}
func (m *ProcessList) XXX_Size() int {
	return xxx_messageInfo_ProcessList.Size(m)
}
func (m *ProcessList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessList.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessList proto.InternalMessageInfo

func (m *ProcessList) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// The response message containing the requested df stats.
type DFReply struct {
	Stats                []*DFStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DFReply) Reset()         { *m = DFReply{} }
func (m *DFReply) String() string { return proto.CompactTextString(m) }
func (*DFReply) ProtoMessage()    {}
func (*DFReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *DFReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DFReply.Unmarshal(m, b)
}
func (m *DFReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DFReply.Marshal(b, m, deterministic)
}
func (m *DFReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DFReply.Merge(m, src)
}
func (m *DFReply) XXX_Size() int {
	return xxx_messageInfo_DFReply.Size(m)
}
func (m *DFReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DFReply.DiscardUnknown(m)
}

var xxx_messageInfo_DFReply proto.InternalMessageInfo

func (m *DFReply) GetStats() []*DFStat {
	if m != nil {
		return m.Stats
	}
	return nil
}

// The response message containing the requested processes.
type DFStat struct {
	Filesystem           string   `protobuf:"bytes,1,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	Size                 uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Available            uint64   `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	MountedOn            string   `protobuf:"bytes,4,opt,name=mounted_on,json=mountedOn,proto3" json:"mounted_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DFStat) Reset()         { *m = DFStat{} }
func (m *DFStat) String() string { return proto.CompactTextString(m) }
func (*DFStat) ProtoMessage()    {}
func (*DFStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *DFStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DFStat.Unmarshal(m, b)
}
func (m *DFStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DFStat.Marshal(b, m, deterministic)
}
func (m *DFStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DFStat.Merge(m, src)
}
func (m *DFStat) XXX_Size() int {
	return xxx_messageInfo_DFStat.Size(m)
}
func (m *DFStat) XXX_DiscardUnknown() {
	xxx_messageInfo_DFStat.DiscardUnknown(m)
}

var xxx_messageInfo_DFStat proto.InternalMessageInfo

func (m *DFStat) GetFilesystem() string {
	if m != nil {
		return m.Filesystem
	}
	return ""
}

func (m *DFStat) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *DFStat) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *DFStat) GetMountedOn() string {
	if m != nil {
		return m.MountedOn
	}
	return ""
}

// LSRequest describes a request to list the contents of a directory
type LSRequest struct {
	// Root indicates the root directory for the list.  If not indicated, '/' is presumed.
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// Recurse indicates that subdirectories should be recursed.
	Recurse bool `protobuf:"varint,2,opt,name=recurse,proto3" json:"recurse,omitempty"`
	// RecursionDepth indicates how many levels of subdirectories should be recursed.  The default (0) indicates that no limit should be enforced.
	RecursionDepth       int32    `protobuf:"varint,3,opt,name=recursion_depth,json=recursionDepth,proto3" json:"recursion_depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LSRequest) Reset()         { *m = LSRequest{} }
func (m *LSRequest) String() string { return proto.CompactTextString(m) }
func (*LSRequest) ProtoMessage()    {}
func (*LSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

func (m *LSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LSRequest.Unmarshal(m, b)
}
func (m *LSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LSRequest.Marshal(b, m, deterministic)
}
func (m *LSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSRequest.Merge(m, src)
}
func (m *LSRequest) XXX_Size() int {
	return xxx_messageInfo_LSRequest.Size(m)
}
func (m *LSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LSRequest proto.InternalMessageInfo

func (m *LSRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *LSRequest) GetRecurse() bool {
	if m != nil {
		return m.Recurse
	}
	return false
}

func (m *LSRequest) GetRecursionDepth() int32 {
	if m != nil {
		return m.RecursionDepth
	}
	return 0
}

// FileInfo describes a file or directory's information
type FileInfo struct {
	// Name is the name (including prefixed path) of the file or directory
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Size indicates the number of bytes contained within the file
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Mode is the bitmap of UNIX mode/permission flags of the file
	Mode uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// Modified indicates the UNIX timestamp at which the file was last modified
	Modified int64 `protobuf:"varint,4,opt,name=modified,proto3" json:"modified,omitempty"`
	// IsDir indicates that the file is a directory
	IsDir bool `protobuf:"varint,5,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	// Error describes any error encountered while trying to read the file information.
	Error                string   `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfo) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *FileInfo) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *FileInfo) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *FileInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessesRequest)(nil), "proto.ProcessesRequest")
	proto.RegisterType((*ProcessesReply)(nil), "proto.ProcessesReply")
	proto.RegisterType((*Process)(nil), "proto.Process")
	proto.RegisterType((*StatsRequest)(nil), "proto.StatsRequest")
	proto.RegisterType((*StatsReply)(nil), "proto.StatsReply")
	proto.RegisterType((*Stat)(nil), "proto.Stat")
	proto.RegisterType((*RestartRequest)(nil), "proto.RestartRequest")
	proto.RegisterType((*RestartReply)(nil), "proto.RestartReply")
	proto.RegisterType((*ResetReply)(nil), "proto.ResetReply")
	proto.RegisterType((*LogsRequest)(nil), "proto.LogsRequest")
	proto.RegisterType((*Data)(nil), "proto.Data")
	proto.RegisterType((*RoutesReply)(nil), "proto.RoutesReply")
	proto.RegisterType((*Route)(nil), "proto.Route")
	proto.RegisterType((*TopRequest)(nil), "proto.TopRequest")
	proto.RegisterType((*TopReply)(nil), "proto.TopReply")
	proto.RegisterType((*ProcessList)(nil), "proto.ProcessList")
	proto.RegisterType((*DFReply)(nil), "proto.DFReply")
	proto.RegisterType((*DFStat)(nil), "proto.DFStat")
	proto.RegisterType((*LSRequest)(nil), "proto.LSRequest")
	proto.RegisterType((*FileInfo)(nil), "proto.FileInfo")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x6d, 0x6f, 0xe3, 0x44,
	0x10, 0x6e, 0x12, 0x3b, 0x89, 0xc7, 0x69, 0xae, 0xb7, 0x47, 0x8f, 0x28, 0x77, 0xa0, 0xde, 0x1e,
	0x12, 0x95, 0xee, 0x94, 0x96, 0x96, 0x97, 0x0f, 0x08, 0x24, 0x24, 0x53, 0x09, 0x51, 0xe9, 0xd0,
	0xf6, 0x40, 0x7c, 0x8b, 0x36, 0xf1, 0x26, 0xac, 0x64, 0x7b, 0x8d, 0x77, 0xcd, 0xc9, 0xfc, 0x09,
	0x7e, 0x2b, 0xff, 0x00, 0xed, 0x9b, 0xe3, 0x5c, 0x15, 0x54, 0xf8, 0xe4, 0x7d, 0x9e, 0x99, 0xdd,
	0xd9, 0x67, 0x76, 0x66, 0x0c, 0x11, 0x2d, 0xf9, 0xa2, 0xac, 0x84, 0x12, 0x28, 0x34, 0x9f, 0xf9,
	0xb3, 0xad, 0x10, 0xdb, 0x8c, 0x5d, 0x18, 0xb4, 0xaa, 0x37, 0x17, 0x2c, 0x2f, 0x55, 0x63, 0x7d,
	0xf0, 0x25, 0x9c, 0xfc, 0x54, 0x89, 0x35, 0x93, 0x92, 0x49, 0xc2, 0x7e, 0xaf, 0x99, 0x54, 0xe8,
	0x39, 0x44, 0x05, 0xcd, 0x99, 0x2c, 0xe9, 0x9a, 0xcd, 0x7a, 0x67, 0xbd, 0xf3, 0x88, 0xec, 0x08,
	0xfc, 0x2d, 0x4c, 0x3b, 0x3b, 0xca, 0xac, 0x41, 0xaf, 0x21, 0x2a, 0x3d, 0x33, 0xeb, 0x9d, 0x0d,
	0xce, 0xe3, 0xab, 0xa9, 0x3d, 0x7e, 0xe1, 0x3c, 0xc9, 0xce, 0x01, 0xbf, 0x83, 0x91, 0x63, 0xff,
	0x3d, 0x10, 0x9a, 0x42, 0x9f, 0xa7, 0xb3, 0xbe, 0xa1, 0xfb, 0x3c, 0x45, 0x1f, 0x40, 0xc8, 0x73,
	0xba, 0x65, 0xb3, 0x81, 0xa1, 0x2c, 0x40, 0x27, 0x30, 0x28, 0x79, 0x3a, 0x0b, 0xce, 0x7a, 0xe7,
	0xc7, 0x44, 0x2f, 0xd1, 0x53, 0x18, 0x4a, 0x45, 0x55, 0x2d, 0x67, 0xa1, 0x71, 0x74, 0x08, 0xbf,
	0x86, 0xc9, 0x9d, 0xa2, 0xea, 0x81, 0x32, 0x2f, 0x00, 0x9c, 0xb7, 0x96, 0xf8, 0x02, 0x42, 0x7d,
	0x8a, 0x97, 0x17, 0x3b, 0x79, 0xda, 0x83, 0x58, 0x0b, 0x56, 0x10, 0x68, 0xf8, 0x1f, 0x45, 0xbd,
	0x80, 0x49, 0xce, 0x72, 0x51, 0x35, 0xcb, 0x5a, 0x6a, 0x6d, 0x5a, 0x47, 0x40, 0x62, 0xcb, 0xfd,
	0xac, 0x29, 0xf4, 0x0c, 0xa2, 0x75, 0x59, 0x3b, 0x7b, 0x68, 0xec, 0xe3, 0x75, 0x59, 0x1b, 0x23,
	0xfe, 0x15, 0xa6, 0x84, 0x49, 0x45, 0x2b, 0xf5, 0x20, 0x59, 0xf7, 0xe2, 0xcf, 0x60, 0xa4, 0x78,
	0xce, 0x44, 0xad, 0x4c, 0x5a, 0x43, 0xe2, 0x21, 0x9e, 0xc2, 0xa4, 0x3d, 0xb9, 0xcc, 0x1a, 0x3c,
	0x01, 0x20, 0x4c, 0x32, 0x87, 0xbe, 0x86, 0xf8, 0x56, 0x6c, 0xe5, 0xff, 0x0a, 0x8a, 0x9f, 0x43,
	0x90, 0x50, 0x45, 0xf5, 0x8b, 0xae, 0x1a, 0x65, 0x8a, 0xa6, 0x77, 0x3e, 0x21, 0x16, 0xe0, 0x6b,
	0x88, 0x89, 0xa8, 0x95, 0xaf, 0xae, 0x4f, 0x60, 0x58, 0x19, 0xe8, 0x72, 0x3f, 0x71, 0xb9, 0x37,
	0x3e, 0xc4, 0xd9, 0x30, 0x85, 0xd0, 0x10, 0xfa, 0x26, 0xbc, 0x50, 0xac, 0xda, 0x74, 0x6e, 0xd2,
	0x12, 0xe8, 0x0c, 0xe2, 0x94, 0x49, 0xc5, 0x0b, 0xaa, 0xb8, 0x28, 0xdc, 0x95, 0xba, 0x94, 0x4e,
	0xc8, 0x96, 0x2a, 0xf6, 0x8e, 0x36, 0xae, 0xce, 0x3c, 0xd4, 0x09, 0x78, 0x2b, 0x4a, 0xa7, 0x18,
	0x7f, 0x07, 0x63, 0x83, 0xf4, 0x15, 0xbf, 0x80, 0x89, 0xab, 0xef, 0x65, 0xc6, 0xa5, 0x32, 0x61,
	0xe3, 0x2b, 0xb4, 0xdf, 0x03, 0xb7, 0x5c, 0x2a, 0x12, 0x97, 0x3b, 0x80, 0x5f, 0x42, 0xdc, 0xb1,
	0x1d, 0xc8, 0xc6, 0x02, 0x46, 0xc9, 0x8d, 0x0d, 0xf3, 0x72, 0xbf, 0x08, 0x8f, 0xdd, 0xf9, 0xc9,
	0x4d, 0xb7, 0x0c, 0x1b, 0x18, 0x5a, 0x02, 0x7d, 0x0c, 0xb0, 0xe1, 0x19, 0x93, 0x8d, 0x54, 0x2c,
	0x77, 0xa9, 0xe8, 0x30, 0x08, 0x41, 0x20, 0xf9, 0x9f, 0xcc, 0x24, 0x21, 0x20, 0x66, 0xad, 0xb3,
	0x47, 0xff, 0xa0, 0x3c, 0xa3, 0xab, 0xcc, 0xf6, 0x59, 0x40, 0x76, 0x04, 0xfa, 0x08, 0x20, 0x17,
	0x75, 0xa1, 0x58, 0xba, 0x14, 0x85, 0x29, 0xd5, 0x88, 0x44, 0x8e, 0x79, 0x53, 0xe0, 0x15, 0x44,
	0xb7, 0x77, 0xbe, 0x22, 0x10, 0x04, 0x95, 0x10, 0xca, 0xc5, 0x35, 0x6b, 0x9d, 0xdb, 0x8a, 0xad,
	0xeb, 0x4a, 0xda, 0xa0, 0x63, 0xe2, 0x21, 0xfa, 0x14, 0x1e, 0xd9, 0x25, 0x17, 0xc5, 0x32, 0x65,
	0xa5, 0xfa, 0xcd, 0x95, 0xe3, 0xb4, 0xa5, 0x13, 0xcd, 0xe2, 0xbf, 0x7a, 0x30, 0xbe, 0xe1, 0x19,
	0xfb, 0xa1, 0xd8, 0x08, 0x1d, 0x43, 0x17, 0x99, 0x8f, 0xa1, 0xd7, 0x7b, 0xaa, 0x06, 0x4e, 0x15,
	0x82, 0x20, 0x17, 0xa9, 0x15, 0x74, 0x4c, 0xcc, 0x1a, 0xcd, 0x61, 0x9c, 0x8b, 0x94, 0x6f, 0x38,
	0xb3, 0xc3, 0x63, 0x40, 0x5a, 0x8c, 0x4e, 0x61, 0xc8, 0xe5, 0x32, 0xe5, 0x95, 0x69, 0xb7, 0x31,
	0x09, 0xb9, 0x4c, 0x78, 0xa5, 0x1f, 0x88, 0x55, 0x95, 0xa8, 0x66, 0x43, 0x3b, 0x80, 0x0c, 0xb8,
	0xfa, 0x3b, 0x80, 0xc1, 0x9b, 0xbb, 0x04, 0x2d, 0xa0, 0x9f, 0xdc, 0xa0, 0xa7, 0x0b, 0x3b, 0x6d,
	0x17, 0x7e, 0xda, 0x2e, 0xbe, 0xd7, 0xd3, 0x76, 0x3e, 0x6d, 0x1f, 0xcb, 0xf6, 0xcf, 0x11, 0x5a,
	0x40, 0x98, 0xe4, 0x4c, 0x6e, 0x0f, 0x6e, 0xf1, 0x43, 0x46, 0xb7, 0x0a, 0x3e, 0x42, 0xd7, 0x00,
	0x3f, 0xd6, 0x2b, 0xb6, 0x16, 0xc5, 0x86, 0x3f, 0x78, 0xd3, 0x2b, 0x08, 0x74, 0x9b, 0x22, 0x5f,
	0x8b, 0x9d, 0x9e, 0x7d, 0xcf, 0xf5, 0xb2, 0x87, 0x5e, 0x41, 0xff, 0xf6, 0x0e, 0x9d, 0x78, 0x57,
	0xff, 0x94, 0xf3, 0x47, 0x8e, 0xf1, 0x79, 0x37, 0xce, 0xdf, 0x40, 0xd4, 0xfe, 0x06, 0xd0, 0x87,
	0xfb, 0xa5, 0xde, 0xfe, 0x4a, 0xe6, 0xa7, 0xf7, 0x0d, 0x56, 0xfd, 0xe7, 0x10, 0x9a, 0x69, 0x72,
	0x50, 0xc8, 0x63, 0xdf, 0xe6, 0xbb, 0x99, 0x73, 0x84, 0xbe, 0x82, 0x91, 0x9b, 0x49, 0xe8, 0x74,
	0x67, 0xef, 0x4c, 0xbf, 0xf9, 0x93, 0xf7, 0x69, 0xbb, 0xf1, 0x4b, 0x18, 0xda, 0x99, 0x72, 0x30,
	0x1e, 0xea, 0x8e, 0x95, 0xf6, 0x9a, 0x9f, 0x41, 0x68, 0xfe, 0x02, 0xe8, 0x49, 0x67, 0xe2, 0xb7,
	0xea, 0x1e, 0xef, 0x93, 0x76, 0xcb, 0x25, 0x0c, 0xde, 0x8a, 0xf2, 0x60, 0x1c, 0x9f, 0x4c, 0x3f,
	0x3c, 0xcc, 0x8e, 0xd1, 0x2f, 0xcc, 0xd4, 0xf8, 0x03, 0x9f, 0x75, 0x35, 0x34, 0xe8, 0xfa, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x1e, 0x58, 0x14, 0xed, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OSDClient is the client API for OSD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OSDClient interface {
	DF(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DFReply, error)
	Dmesg(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
	Kubeconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (OSD_LogsClient, error)
	LS(ctx context.Context, in *LSRequest, opts ...grpc.CallOption) (OSD_LSClient, error)
	Processes(ctx context.Context, in *ProcessesRequest, opts ...grpc.CallOption) (*ProcessesReply, error)
	Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResetReply, error)
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error)
	Routes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoutesReply, error)
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
	Top(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TopReply, error)
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
}

type oSDClient struct {
	cc *grpc.ClientConn
}

func NewOSDClient(cc *grpc.ClientConn) OSDClient {
	return &oSDClient{cc}
}

func (c *oSDClient) DF(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DFReply, error) {
	out := new(DFReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/DF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Dmesg(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.OSD/Dmesg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Kubeconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.OSD/Kubeconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (OSD_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OSD_serviceDesc.Streams[0], "/proto.OSD/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &oSDLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OSD_LogsClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type oSDLogsClient struct {
	grpc.ClientStream
}

func (x *oSDLogsClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oSDClient) LS(ctx context.Context, in *LSRequest, opts ...grpc.CallOption) (OSD_LSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OSD_serviceDesc.Streams[1], "/proto.OSD/LS", opts...)
	if err != nil {
		return nil, err
	}
	x := &oSDLSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OSD_LSClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type oSDLSClient struct {
	grpc.ClientStream
}

func (x *oSDLSClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oSDClient) Processes(ctx context.Context, in *ProcessesRequest, opts ...grpc.CallOption) (*ProcessesReply, error) {
	out := new(ProcessesReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Processes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResetReply, error) {
	out := new(ResetReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error) {
	out := new(RestartReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Routes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RoutesReply, error) {
	out := new(RoutesReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Routes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Top(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TopReply, error) {
	out := new(TopReply)
	err := c.cc.Invoke(ctx, "/proto.OSD/Top", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.OSD/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSDServer is the server API for OSD service.
type OSDServer interface {
	DF(context.Context, *empty.Empty) (*DFReply, error)
	Dmesg(context.Context, *empty.Empty) (*Data, error)
	Kubeconfig(context.Context, *empty.Empty) (*Data, error)
	Logs(*LogsRequest, OSD_LogsServer) error
	LS(*LSRequest, OSD_LSServer) error
	Processes(context.Context, *ProcessesRequest) (*ProcessesReply, error)
	Reset(context.Context, *empty.Empty) (*ResetReply, error)
	Restart(context.Context, *RestartRequest) (*RestartReply, error)
	Routes(context.Context, *empty.Empty) (*RoutesReply, error)
	Stats(context.Context, *StatsRequest) (*StatsReply, error)
	Top(context.Context, *empty.Empty) (*TopReply, error)
	Version(context.Context, *empty.Empty) (*Data, error)
}

func RegisterOSDServer(s *grpc.Server, srv OSDServer) {
	s.RegisterService(&_OSD_serviceDesc, srv)
}

func _OSD_DF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).DF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/DF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).DF(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Dmesg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Dmesg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Dmesg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Dmesg(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Kubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Kubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Kubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Kubeconfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OSDServer).Logs(m, &oSDLogsServer{stream})
}

type OSD_LogsServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type oSDLogsServer struct {
	grpc.ServerStream
}

func (x *oSDLogsServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _OSD_LS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LSRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OSDServer).LS(m, &oSDLSServer{stream})
}

type OSD_LSServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type oSDLSServer struct {
	grpc.ServerStream
}

func (x *oSDLSServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _OSD_Processes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Processes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Processes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Processes(ctx, req.(*ProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Reset(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Routes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Routes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Top_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Top(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Top",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Top(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSD_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OSD/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _OSD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OSD",
	HandlerType: (*OSDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DF",
			Handler:    _OSD_DF_Handler,
		},
		{
			MethodName: "Dmesg",
			Handler:    _OSD_Dmesg_Handler,
		},
		{
			MethodName: "Kubeconfig",
			Handler:    _OSD_Kubeconfig_Handler,
		},
		{
			MethodName: "Processes",
			Handler:    _OSD_Processes_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _OSD_Reset_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _OSD_Restart_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _OSD_Routes_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _OSD_Stats_Handler,
		},
		{
			MethodName: "Top",
			Handler:    _OSD_Top_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _OSD_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _OSD_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LS",
			Handler:       _OSD_LS_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
