// +build linux

package main

import "C"

import (
	"flag"
	"log"
	"net/http"
	"os"

	"github.com/autonomy/dianemo/initramfs/src/init/pkg/constants"
	"github.com/autonomy/dianemo/initramfs/src/init/pkg/handlers"
	"github.com/autonomy/dianemo/initramfs/src/init/pkg/mount"
	"github.com/autonomy/dianemo/initramfs/src/init/pkg/mount/cgroups"
	"github.com/autonomy/dianemo/initramfs/src/init/pkg/process"
	"github.com/autonomy/dianemo/initramfs/src/init/pkg/switchroot"
	"github.com/autonomy/dianemo/initramfs/src/init/pkg/userdata"
)

var (
	switchRoot *bool
)

func hang() {
	if rec := recover(); rec != nil {
		err, ok := rec.(error)
		if ok {
			log.Printf("%s\n", err.Error())
		}
	}
	// Hang infinitely to avoid a kernel panic.
	select {}
}

func init() {
	log.SetFlags(log.Lshortfile | log.Ldate | log.Lmicroseconds | log.Ltime)
	os.Setenv("PATH", constants.PATH)

	switchRoot = flag.Bool("switch-root", false, "perform a switch_root")
	flag.Parse()
}

func main() {
	defer hang()
	if !*switchRoot {
		// Mount the initial file systems.
		if err := mount.Mount(); err != nil {
			panic(err)
		}
		// Execute the user data.
		if err := userdata.Execute(); err != nil {
			panic(err)
		}
		// Move the initial file systems to the new root.
		if err := mount.Move(); err != nil {
			panic(err)
		}
		// Mount the cgroups file systems to the new root.
		if err := cgroups.Mount(); err != nil {
			panic(err)
		}
		// Perform the equivalent of switch_root.
		// See https://github.com/karelzak/util-linux/blob/master/sys-utils/switch_root.c
		if err := switchroot.Switch(); err != nil {
			panic(err)
		}
	}

	// Start the processes essential to running Kubernetes.
	processManager := process.NewManager()
	if err := processManager.Start(&process.CRIO{}); err != nil {
		panic(err)
	}
	if err := processManager.Start(&process.Kubeadm{}); err != nil {
		panic(err)
	}
	if err := processManager.Start(&process.Kubelet{}); err != nil {
		panic(err)
	}

	// TODO: Authn/Authz.
	// TODO: Errors API that admins can use to debug.
	// An endpoint for retreiving the admin.conf generated by kubeadm.
	http.HandleFunc("/kubeconfig", handlers.KubeConfigHandleFunc)
	// An endpoint for listing the running containers.
	http.HandleFunc("/container/", handlers.ContainerHandleFunc)
	// An endpoint for streaming a process' stdout/stderr.
	http.HandleFunc("/logs/", process.StreamHandleFunc)
	// TODO: TLS only.
	if err := http.ListenAndServe(":8080", nil); err != nil {
		panic(err)
	}
}
