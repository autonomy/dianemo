// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the process name.
type ProcessesRequest struct {
	Process              string   `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessesRequest) Reset()         { *m = ProcessesRequest{} }
func (m *ProcessesRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessesRequest) ProtoMessage()    {}
func (*ProcessesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_7e61790eeabe0b0b, []int{0}
}
func (m *ProcessesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessesRequest.Unmarshal(m, b)
}
func (m *ProcessesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessesRequest.Marshal(b, m, deterministic)
}
func (dst *ProcessesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessesRequest.Merge(dst, src)
}
func (m *ProcessesRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessesRequest.Size(m)
}
func (m *ProcessesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessesRequest proto.InternalMessageInfo

func (m *ProcessesRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

// The response message containing the requested logs.
type ProcessesReply struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessesReply) Reset()         { *m = ProcessesReply{} }
func (m *ProcessesReply) String() string { return proto.CompactTextString(m) }
func (*ProcessesReply) ProtoMessage()    {}
func (*ProcessesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_7e61790eeabe0b0b, []int{1}
}
func (m *ProcessesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessesReply.Unmarshal(m, b)
}
func (m *ProcessesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessesReply.Marshal(b, m, deterministic)
}
func (dst *ProcessesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessesReply.Merge(dst, src)
}
func (m *ProcessesReply) XXX_Size() int {
	return xxx_messageInfo_ProcessesReply.Size(m)
}
func (m *ProcessesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessesReply proto.InternalMessageInfo

func (m *ProcessesReply) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// The request message containing the process name.
type LogsRequest struct {
	Process              string   `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
	Container            bool     `protobuf:"varint,2,opt,name=container" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsRequest) Reset()         { *m = LogsRequest{} }
func (m *LogsRequest) String() string { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()    {}
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_7e61790eeabe0b0b, []int{2}
}
func (m *LogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsRequest.Unmarshal(m, b)
}
func (m *LogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsRequest.Marshal(b, m, deterministic)
}
func (dst *LogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsRequest.Merge(dst, src)
}
func (m *LogsRequest) XXX_Size() int {
	return xxx_messageInfo_LogsRequest.Size(m)
}
func (m *LogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogsRequest proto.InternalMessageInfo

func (m *LogsRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *LogsRequest) GetContainer() bool {
	if m != nil {
		return m.Container
	}
	return false
}

// The response message containing the requested logs.
type Data struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_7e61790eeabe0b0b, []int{3}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterType((*ProcessesRequest)(nil), "proto.ProcessesRequest")
	proto.RegisterType((*ProcessesReply)(nil), "proto.ProcessesReply")
	proto.RegisterType((*LogsRequest)(nil), "proto.LogsRequest")
	proto.RegisterType((*Data)(nil), "proto.Data")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dianemo service

type DianemoClient interface {
	Kubeconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
	Processes(ctx context.Context, in *ProcessesRequest, opts ...grpc.CallOption) (*ProcessesReply, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Dianemo_LogsClient, error)
	Dmesg(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error)
}

type dianemoClient struct {
	cc *grpc.ClientConn
}

func NewDianemoClient(cc *grpc.ClientConn) DianemoClient {
	return &dianemoClient{cc}
}

func (c *dianemoClient) Kubeconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := grpc.Invoke(ctx, "/proto.Dianemo/Kubeconfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dianemoClient) Processes(ctx context.Context, in *ProcessesRequest, opts ...grpc.CallOption) (*ProcessesReply, error) {
	out := new(ProcessesReply)
	err := grpc.Invoke(ctx, "/proto.Dianemo/Processes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dianemoClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Dianemo_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Dianemo_serviceDesc.Streams[0], c.cc, "/proto.Dianemo/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &dianemoLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dianemo_LogsClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type dianemoLogsClient struct {
	grpc.ClientStream
}

func (x *dianemoLogsClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dianemoClient) Dmesg(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := grpc.Invoke(ctx, "/proto.Dianemo/Dmesg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dianemo service

type DianemoServer interface {
	Kubeconfig(context.Context, *empty.Empty) (*Data, error)
	Processes(context.Context, *ProcessesRequest) (*ProcessesReply, error)
	Logs(*LogsRequest, Dianemo_LogsServer) error
	Dmesg(context.Context, *empty.Empty) (*Data, error)
}

func RegisterDianemoServer(s *grpc.Server, srv DianemoServer) {
	s.RegisterService(&_Dianemo_serviceDesc, srv)
}

func _Dianemo_Kubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DianemoServer).Kubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dianemo/Kubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DianemoServer).Kubeconfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dianemo_Processes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DianemoServer).Processes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dianemo/Processes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DianemoServer).Processes(ctx, req.(*ProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dianemo_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DianemoServer).Logs(m, &dianemoLogsServer{stream})
}

type Dianemo_LogsServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type dianemoLogsServer struct {
	grpc.ServerStream
}

func (x *dianemoLogsServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _Dianemo_Dmesg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DianemoServer).Dmesg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dianemo/Dmesg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DianemoServer).Dmesg(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dianemo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dianemo",
	HandlerType: (*DianemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kubeconfig",
			Handler:    _Dianemo_Kubeconfig_Handler,
		},
		{
			MethodName: "Processes",
			Handler:    _Dianemo_Processes_Handler,
		},
		{
			MethodName: "Dmesg",
			Handler:    _Dianemo_Dmesg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Dianemo_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_7e61790eeabe0b0b) }

var fileDescriptor_api_7e61790eeabe0b0b = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x1b, 0xd4, 0x52, 0x72, 0x45, 0x08, 0x9d, 0xf8, 0x13, 0x85, 0x0e, 0x95, 0xa7, 0x0a,
	0x90, 0x8b, 0xe8, 0xcc, 0x96, 0x4e, 0x30, 0xa0, 0xbc, 0x81, 0x13, 0x5d, 0xa3, 0x48, 0x89, 0x6d,
	0x62, 0x67, 0xc8, 0xab, 0xf2, 0x34, 0xc8, 0x71, 0x02, 0x55, 0x19, 0x60, 0xb2, 0x7e, 0x77, 0x9f,
	0xef, 0xfc, 0x19, 0x42, 0xa1, 0x4b, 0xae, 0x1b, 0x65, 0x15, 0xce, 0xfa, 0x23, 0xbe, 0x2b, 0x94,
	0x2a, 0x2a, 0xda, 0xf4, 0x29, 0x6b, 0xf7, 0x1b, 0xaa, 0xb5, 0xed, 0x3c, 0xc3, 0x1e, 0xe1, 0xf2,
	0xbd, 0x51, 0x39, 0x19, 0x43, 0x26, 0xa5, 0x8f, 0x96, 0x8c, 0xc5, 0x08, 0xe6, 0xda, 0xd7, 0xa2,
	0x60, 0x15, 0xac, 0xc3, 0x74, 0x8c, 0xec, 0x1e, 0x2e, 0x0e, 0x68, 0x5d, 0x75, 0x8e, 0xcd, 0x95,
	0xb4, 0x24, 0x6d, 0xcf, 0x9e, 0xa7, 0x63, 0x64, 0x3b, 0x58, 0xbc, 0xa9, 0xe2, 0xef, 0xa1, 0xb8,
	0x84, 0xd0, 0xdd, 0x11, 0xa5, 0xa4, 0x26, 0x3a, 0x59, 0x05, 0xeb, 0xb3, 0xf4, 0xa7, 0xc0, 0x96,
	0x30, 0x4d, 0x84, 0x15, 0x78, 0x05, 0xb3, 0xac, 0xb3, 0x64, 0x86, 0x35, 0x3e, 0x3c, 0x7f, 0x06,
	0x30, 0x4f, 0x4a, 0x21, 0xa9, 0x56, 0xb8, 0x05, 0x78, 0x6d, 0x33, 0xca, 0x95, 0xdc, 0x97, 0x05,
	0xde, 0x70, 0xaf, 0xcd, 0x47, 0x6d, 0xbe, 0x73, 0xda, 0xf1, 0xc2, 0x17, 0xb8, 0x1b, 0xca, 0x26,
	0xf8, 0x02, 0xe1, 0xb7, 0x11, 0xde, 0x0e, 0xbd, 0xe3, 0x1f, 0x89, 0xaf, 0x7f, 0x37, 0x74, 0xd5,
	0xb1, 0x09, 0x3e, 0xc0, 0xd4, 0x49, 0x22, 0x0e, 0xc0, 0x81, 0xf1, 0xd1, 0xa6, 0xa7, 0x00, 0x39,
	0xcc, 0x92, 0x9a, 0xcc, 0x7f, 0xdf, 0x96, 0x9d, 0xf6, 0x69, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0x57, 0x7d, 0xd0, 0xd3, 0x01, 0x00, 0x00,
}
