<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Components on Talos</title>
    <link>https://talos.autonomy.io/components/</link>
    <description>Recent content in Components on Talos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Oct 2018 19:40:55 -0700</lastBuildDate>
    
	<atom:link href="https://talos.autonomy.io/components/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kernel</title>
      <link>https://talos.autonomy.io/components/kernel/</link>
      <pubDate>Mon, 29 Oct 2018 19:40:55 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/kernel/</guid>
      <description>The kernel included with Talos is configured according to the recommendations outlined in the Kernel Self Protection Project (KSSP).</description>
    </item>
    
    <item>
      <title>init</title>
      <link>https://talos.autonomy.io/components/init/</link>
      <pubDate>Mon, 29 Oct 2018 19:40:55 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/init/</guid>
      <description>A common theme throughout the design of Talos is minimalism. We believe strongly in the UNIX philosophy that each program should do one job well. The init included in Talos is one example of this.
We wanted to create a focused init that had one job - run Kubernetes. There simply is no mechanism in place to do anything else.
To accomplish this, we must address real world operations needs like:</description>
    </item>
    
    <item>
      <title>kubeadm</title>
      <link>https://talos.autonomy.io/components/kubeadm/</link>
      <pubDate>Mon, 29 Oct 2018 19:40:55 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/kubeadm/</guid>
      <description>At the heart of Talos is kubeadm, allowing it to harness the power of the official upstream bootstrap tool. By integrating with kubeadm natively, Talos stands to gain a strong community of users and developers already familiar with kubeadm.</description>
    </item>
    
    <item>
      <title>trustd</title>
      <link>https://talos.autonomy.io/components/trustd/</link>
      <pubDate>Mon, 29 Oct 2018 19:40:55 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/trustd/</guid>
      <description>Security is one of the highest priorities within Autonomy. To run a Kubernetes cluster a certain level of trust is required to operate a cluster. For example, orchestrating the bootstrap of a highly available control plane requires the distribution of sensitive PKI data.
To that end, we created trustd. Based on the concept of a Root of Trust, trustd is a simple daemon responsible for establishing trust within the system. Once trust is established, various methods become available to the trustee.</description>
    </item>
    
    <item>
      <title>proxyd</title>
      <link>https://talos.autonomy.io/components/proxyd/</link>
      <pubDate>Mon, 29 Oct 2018 19:40:55 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/proxyd/</guid>
      <description>Highly available Kubernetes clusters are crucial for production quality clusters. The proxyd component is a simple yet powerful reverse proxy that adapts to where Talos is employed and provides load balancing across all API servers.</description>
    </item>
    
    <item>
      <title>osd</title>
      <link>https://talos.autonomy.io/components/osd/</link>
      <pubDate>Mon, 29 Oct 2018 19:40:55 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/osd/</guid>
      <description>Talos is unique in that it has no concept of host-level access. There are no shells installed. No ssh daemon. Only what is required to run Kubernetes. Furthermore, there is no way to run any custom processes on the host level.
To make this work, we needed an out-of-band tool for managing the nodes. In an ideal world, the system would be self-healing and we would never have to touch it.</description>
    </item>
    
    <item>
      <title>osctl</title>
      <link>https://talos.autonomy.io/components/osctl/</link>
      <pubDate>Mon, 29 Oct 2018 19:40:55 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/osctl/</guid>
      <description>The osctl CLI is the client to the osd service running on every node. With it you can do things like:
 retrieve container logs restart a service reset a node reboot a node retrieve kernel logs generate pki resources inject data into node configuration files  </description>
    </item>
    
    <item>
      <title>blockd</title>
      <link>https://talos.autonomy.io/components/blockd/</link>
      <pubDate>Tue, 30 Oct 2018 09:16:35 -0700</pubDate>
      
      <guid>https://talos.autonomy.io/components/blockd/</guid>
      <description>Talos comes with a reserved block device with three partitions:
 an EFI System Partition (ESP) a ROOT partition mounted as read-only that contains the minimal set of binaries to operate system services and a DATA partion that is mounted as read/write at /var/run  These partitions are reserved and cannot be modified. The one exception to this is that the DATA partition will be resized automatically in the init process to the maximum size possible.</description>
    </item>
    
  </channel>
</rss>