---
kind: pipeline
name: build

node:
  node-role.kubernetes.io/ci: ""

services:
  - name: docker
    image: docker:19.03-dind
    entrypoint: [dockerd]
    privileged: true
    command:
      - --dns=8.8.8.8
      - --log-level=error
      - --mtu=1440
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
      - name: tmp
        path: /tmp

steps:
# Phase 1
  - name: git.FetchTags
    image: docker:git
    commands:
      - git fetch --tags
    when:
      event: tag

  - name: artifact.Kernel
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make kernel
    volumes:
      - name: dockersock
        path: /var/run
    when:
      event: tag

  - name: buildkit
    detach: true
    image: moby/buildkit:v0.6.0
    privileged: true
    commands:
      - buildkitd --addr tcp://0.0.0.0:1234 --allow-insecure-entitlement security.insecure
    when:
      event:
        - ""

# Phase 2
  - name: build.Lint
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make lint
    depends_on:
      - git.FetchTags
      - buildkit

  - name: build.Machined
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make machined
    depends_on:
      - build.Lint

  - name: build.Osd
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make osd
    depends_on:
      - build.Lint

  - name: build.Trustd
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make trustd
    depends_on:
      - build.Lint

  - name: build.Proxyd
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make proxyd
    depends_on:
      - build.Lint

  - name: build.Ntpd
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make ntpd
    depends_on:
      - build.Lint

  - name: build.Osctl-Darwin
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make osctl-darwin
    depends_on:
      - build.Lint

  - name: build.Osctl-Linux
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make osctl-linux
    depends_on:
      - build.Lint

# Phase 3
  - name: build.Rootfs
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make rootfs
    volumes:
      - name: dockersock
        path: /var/run
    depends_on:
      - build.Machined
      - build.Osd
      - build.Proxyd
      - build.Trustd
      - build.Ntpd

# Phase 4
  - name: build.Initramfs
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make initramfs
    volumes:
      - name: dockersock
        path: /var/run
    depends_on:
      - build.Rootfs

  - name: build.Image
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make talos
    volumes:
      - name: dockersock
        path: /var/run
    depends_on:
      - build.Rootfs

  - name: test.UnitTest
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make test
    volumes:
      - name: dockersock
        path: /var/run/
    depends_on:
      - build.Rootfs
      - build.Proxyd
      - build.Osd


# Phase 5
  - name: build.Installer
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make installer
    volumes:
      - name: dockersock
        path: /var/run
    depends_on:
      - build.Initramfs

# Phase 5.1
  - name: test.CoverageReport
    image: plugins/codecov
    settings:
      token:
        from_secret: codecov_token
      files:
        - coverage.txt
    depends_on:
      - test.UnitTest

# Phase 5.2
  - name: test.Integration
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make basic-integration
      - cp build/osctl-linux-amd64 /tmp/osctl
      - cd /tmp
      - ./osctl config generate cluster.local 1.2.3.4,2.3.4.5,3.4.5.6
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
    depends_on:
      - build.Image
      - build.Osctl-Linux

# Phase 6
  - name: artifact.Iso
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make talos-iso
    volumes:
      - name: dockersock
        path: /var/run
    when:
      event: tag
    depends_on:
      - build.Installer

  - name: artifact.Gce
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make talos-gce
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
    when:
      event: tag
    depends_on:
      - build.Installer

  - name: artifact.Azure
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
    commands:
      - make talos-azure
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
    when:
      event: tag
    depends_on:
      # TODO look into this; are we really dependent on gce here?
      - artifact.Gce

  - name: artifact.Push
    image: autonomy/build-container:latest
    pull: always
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password
    commands:
      - make gitmeta
      - make login
      - make push
    volumes:
      - name: dockersock
        path: /var/run
    when:
      event:
        - push
    depends_on:
      - test.Integration

  - name: artifact.Aws
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: us-west-2
      AWS_PUBLISH_REGIONS: us-west-2,us-east-1,us-east-2,us-west-1,eu-central-1
    commands:
      - make talos-aws | tee -a amibuild.log
      # may need to move note location to prevent git tree from being deer-tay
      - awk 'BEGIN{ print "Official AMIs:" }; NF == 2  && /ami-/ { print "- "$0 }' amibuild.log > note
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
    when:
      event: tag
    depends_on:
      - test.Integration
      - artifact.Push

  - name: release
    image: plugins/github-release
    settings:
      api_key:
        from_secret: github_token
      draft: true
      note: note
      files:
        - build/*
      checksum:
        - sha256
        - sha512
    when:
      event: tag
    depends_on:
      - test.Integration
      - artifact.Kernel
      - artifact.Iso
      - artifact.Gce
      - artifact.Azure
      - artifact.Aws

volumes:
  - name: dockersock
    temp: {}
  - name: dev
    host:
      path: /dev
  - name: tmp
    temp: {}

trigger:
  cron:
    exclude:
      - nightly
  target:
    exclude:
      - e2e.promotion

---
kind: pipeline
name: e2e.cron

node:
  node-role.kubernetes.io/ci: ''

services:
  - name: docker
    image: docker:dind
    privileged: true
    command:
      - --dns=8.8.8.8
      - --log-level=error
      - --mtu=1440
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
      - name: tmp
        path: /tmp

steps:
  - name: buildkit
    detach: true
    image: moby/buildkit:v0.6.0
    privileged: true
    commands:
      - buildkitd --addr tcp://0.0.0.0:1234 --allow-insecure-entitlement security.insecure
    when:
      event:
        - ""

  - name: build.ClusterCreate
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      AZURE_SVC_ACCT:
        from_secret: azure_svc_acct
      GCE_SVC_ACCT:
        from_secret: gce_svc_acct
      PACKET_AUTH_TOKEN:
        from_secret: packet_auth_token
      TAG: latest
    commands:
      - until docker ps; do sleep 5; done
      - make osctl-linux
      - make osctl-cluster-create
      - make capi-setup
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
    depends_on:
      - buildkit

  - name: build.AzureImage
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      AZURE_SVC_ACCT:
        from_secret: azure_svc_acct
      TAG: latest
    commands:
      - until docker ps; do sleep 5; done
      - make talos-azure
      - ./hack/test/azure-setup.sh
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
      - name: tmp
        path: /tmp
    depends_on:
      - buildkit

  - name: e2e.Azure
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      PLATFORM: azure
    commands:
      - make e2e-integration
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
    depends_on:
      - build.AzureImage
      - build.ClusterCreate

  - name: build.GceImage
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      GCE_SVC_ACCT:
        from_secret: gce_svc_acct
      TAG: latest
    commands:
      - until docker ps; do sleep 5; done
      - make talos-gce
      - ./hack/test/gce-setup.sh
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
    depends_on:
      - buildkit

  - name: e2e.Gce
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      PLATFORM: gce
    commands:
      - make e2e-integration
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
    depends_on:
      - build.GceImage
      - build.ClusterCreate

volumes:
  - name: dockersock
    temp: {}
  - name: dev
    host:
      path: /dev
  - name: tmp
    temp: {}

trigger:
  cron:
    include:
      - nightly

---
kind: pipeline
name: e2e.promotion

node:
  node-role.kubernetes.io/ci: ''

workspace:
  path: src/github.com/talos-systems/talos

clone:
  disable: true

services:
  - name: docker
    image: docker:dind
    privileged: true
    command:
      - --dns=8.8.8.8
      - --log-level=error
      - --mtu=1440
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
      - name: tmp
        path: /tmp

steps:
# Phase 1
  - name: git.CloneRepo
    image: autonomy/build-container:latest
    commands:
      - cd .. && rmdir talos
      - git clone --depth 1 https://github.com/talos-systems/talos.git
    # Exclude clone during drone exec
    when:
      event:
        exclude:
          - ""

  - name: git.FetchSource
    image: autonomy/build-container:latest
    commands:
      - test -n "${DRONE_COMMIT_REF}" && git fetch origin "${DRONE_COMMIT_REF}:pr"
      - test -n "${DRONE_COMMIT_REF}" && git checkout pr
    depends_on:
      - git.CloneRepo
    # Exclude clone during drone exec
    when:
      event:
        exclude:
          - ""

  - name: buildkit
    detach: true
    image: moby/buildkit:v0.6.0
    privileged: true
    commands:
      - buildkitd --addr tcp://0.0.0.0:1234 --allow-insecure-entitlement security.insecure
    when:
      event:
        - ""

  - name: build.ClusterCreate
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      AZURE_SVC_ACCT:
        from_secret: azure_svc_acct
      GCE_SVC_ACCT:
        from_secret: gce_svc_acct
      PACKET_AUTH_TOKEN:
        from_secret: packet_auth_token
    commands:
      - until docker ps; do sleep 1; done
      - make osctl-linux rootfs talos installer
      - make osctl-cluster-create
      - make capi-setup
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
    depends_on:
      - git.FetchSource
      - buildkit

  - name: build.AzureImage
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      AZURE_SVC_ACCT:
        from_secret: azure_svc_acct
    commands:
      - make talos-azure
      - ./hack/test/azure-setup.sh
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
      - name: tmp
        path: /tmp
    depends_on:
      - build.ClusterCreate

  - name: e2e.Azure
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      PLATFORM: azure
    commands:
      - make e2e-integration
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
    depends_on:
      - build.AzureImage

  - name: build.GceImage
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      GCE_SVC_ACCT:
        from_secret: gce_svc_acct
    commands:
      - make talos-gce
      - ./hack/test/gce-setup.sh
    volumes:
      - name: dockersock
        path: /var/run
      - name: dev
        path: /dev
    depends_on:
      - build.AzureImage

  - name: e2e.Gce
    image: autonomy/build-container:latest
    pull: always
    environment:
      BUILDKIT_HOST: ${BUILDKIT_HOST=tcp://buildkitd.ci.svc:1234}
      BINDIR: /usr/local/bin
      PLATFORM: gce
    commands:
      - make e2e-integration
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
    depends_on:
      - build.GceImage

volumes:
  - name: dockersock
    temp: {}
  - name: dev
    host:
      path: /dev
  - name: tmp
    temp: {}

trigger:
  target:
    include:
      - e2e.promotion
---
kind: pipeline
name: notify

node:
  node-role.kubernetes.io/ci: ''

clone:
  disable: true

steps:
  - name: slack
    image: plugins/slack
    settings:
      webhook:
        from_secret: slack_webhook
      channel: proj-talos-maint
    when:
      status:
        - success
        - failure

trigger:
  status:
    - success
    - failure

depends_on:
  - build
  - e2e.cron
  - e2e.promotion
